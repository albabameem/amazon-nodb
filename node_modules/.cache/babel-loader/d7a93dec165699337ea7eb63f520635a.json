{"ast":null,"code":"define(['jquery', 'jquery-mousewheel', './select2/core', './select2/defaults', './select2/utils'], function ($, _, Select2, Defaults, Utils) {\n  if ($.fn.select2 == null) {\n    // All methods that should return the element\n    var thisMethods = ['open', 'close', 'destroy'];\n\n    $.fn.select2 = function (options) {\n      options = options || {};\n\n      if (typeof options === 'object') {\n        this.each(function () {\n          var instanceOptions = $.extend(true, {}, options);\n          var instance = new Select2($(this), instanceOptions);\n        });\n        return this;\n      } else if (typeof options === 'string') {\n        var ret;\n        var args = Array.prototype.slice.call(arguments, 1);\n        this.each(function () {\n          var instance = Utils.GetData(this, 'select2');\n\n          if (instance == null && window.console && console.error) {\n            console.error('The select2(\\'' + options + '\\') method was called on an ' + 'element that is not using Select2.');\n          }\n\n          ret = instance[options].apply(instance, args);\n        }); // Check if we should be returning `this`\n\n        if ($.inArray(options, thisMethods) > -1) {\n          return this;\n        }\n\n        return ret;\n      } else {\n        throw new Error('Invalid arguments for Select2: ' + options);\n      }\n    };\n  }\n\n  if ($.fn.select2.defaults == null) {\n    $.fn.select2.defaults = Defaults;\n  }\n\n  return Select2;\n});","map":{"version":3,"sources":["/Users/albab/bookapro/amazon/src/assets/vendor/select2/src/js/jquery.select2.js"],"names":["define","$","_","Select2","Defaults","Utils","fn","select2","thisMethods","options","each","instanceOptions","extend","instance","ret","args","Array","prototype","slice","call","arguments","GetData","window","console","error","apply","inArray","Error","defaults"],"mappings":"AAAAA,MAAM,CAAC,CACL,QADK,EAEL,mBAFK,EAIL,gBAJK,EAKL,oBALK,EAML,iBANK,CAAD,EAOH,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,OAAhB,EAAyBC,QAAzB,EAAmCC,KAAnC,EAA0C;AAC3C,MAAIJ,CAAC,CAACK,EAAF,CAAKC,OAAL,IAAgB,IAApB,EAA0B;AACxB;AACA,QAAIC,WAAW,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,SAAlB,CAAlB;;AAEAP,IAAAA,CAAC,CAACK,EAAF,CAAKC,OAAL,GAAe,UAAUE,OAAV,EAAmB;AAChCA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,aAAKC,IAAL,CAAU,YAAY;AACpB,cAAIC,eAAe,GAAGV,CAAC,CAACW,MAAF,CAAS,IAAT,EAAe,EAAf,EAAmBH,OAAnB,CAAtB;AAEA,cAAII,QAAQ,GAAG,IAAIV,OAAJ,CAAYF,CAAC,CAAC,IAAD,CAAb,EAAqBU,eAArB,CAAf;AACD,SAJD;AAMA,eAAO,IAAP;AACD,OARD,MAQO,IAAI,OAAOF,OAAP,KAAmB,QAAvB,EAAiC;AACtC,YAAIK,GAAJ;AACA,YAAIC,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAAX;AAEA,aAAKV,IAAL,CAAU,YAAY;AACpB,cAAIG,QAAQ,GAAGR,KAAK,CAACgB,OAAN,CAAc,IAAd,EAAoB,SAApB,CAAf;;AAEA,cAAIR,QAAQ,IAAI,IAAZ,IAAoBS,MAAM,CAACC,OAA3B,IAAsCA,OAAO,CAACC,KAAlD,EAAyD;AACvDD,YAAAA,OAAO,CAACC,KAAR,CACE,mBAAmBf,OAAnB,GAA6B,8BAA7B,GACA,oCAFF;AAID;;AAEDK,UAAAA,GAAG,GAAGD,QAAQ,CAACJ,OAAD,CAAR,CAAkBgB,KAAlB,CAAwBZ,QAAxB,EAAkCE,IAAlC,CAAN;AACD,SAXD,EAJsC,CAiBtC;;AACA,YAAId,CAAC,CAACyB,OAAF,CAAUjB,OAAV,EAAmBD,WAAnB,IAAkC,CAAC,CAAvC,EAA0C;AACxC,iBAAO,IAAP;AACD;;AAED,eAAOM,GAAP;AACD,OAvBM,MAuBA;AACL,cAAM,IAAIa,KAAJ,CAAU,oCAAoClB,OAA9C,CAAN;AACD;AACF,KArCD;AAsCD;;AAED,MAAIR,CAAC,CAACK,EAAF,CAAKC,OAAL,CAAaqB,QAAb,IAAyB,IAA7B,EAAmC;AACjC3B,IAAAA,CAAC,CAACK,EAAF,CAAKC,OAAL,CAAaqB,QAAb,GAAwBxB,QAAxB;AACD;;AAED,SAAOD,OAAP;AACD,CAzDK,CAAN","sourcesContent":["define([\n  'jquery',\n  'jquery-mousewheel',\n\n  './select2/core',\n  './select2/defaults',\n  './select2/utils'\n], function ($, _, Select2, Defaults, Utils) {\n  if ($.fn.select2 == null) {\n    // All methods that should return the element\n    var thisMethods = ['open', 'close', 'destroy'];\n\n    $.fn.select2 = function (options) {\n      options = options || {};\n\n      if (typeof options === 'object') {\n        this.each(function () {\n          var instanceOptions = $.extend(true, {}, options);\n\n          var instance = new Select2($(this), instanceOptions);\n        });\n\n        return this;\n      } else if (typeof options === 'string') {\n        var ret;\n        var args = Array.prototype.slice.call(arguments, 1);\n\n        this.each(function () {\n          var instance = Utils.GetData(this, 'select2');\n\n          if (instance == null && window.console && console.error) {\n            console.error(\n              'The select2(\\'' + options + '\\') method was called on an ' +\n              'element that is not using Select2.'\n            );\n          }\n\n          ret = instance[options].apply(instance, args);\n        });\n\n        // Check if we should be returning `this`\n        if ($.inArray(options, thisMethods) > -1) {\n          return this;\n        }\n\n        return ret;\n      } else {\n        throw new Error('Invalid arguments for Select2: ' + options);\n      }\n    };\n  }\n\n  if ($.fn.select2.defaults == null) {\n    $.fn.select2.defaults = Defaults;\n  }\n\n  return Select2;\n});\n"]},"metadata":{},"sourceType":"module"}