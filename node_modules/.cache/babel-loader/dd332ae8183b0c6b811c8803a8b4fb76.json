{"ast":null,"code":"'use strict';\n\nconst AbstractQuery = require('../abstract/query');\n\nconst sequelizeErrors = require('../../errors');\n\nconst _ = require('lodash');\n\nconst {\n  logger\n} = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst debug = logger.debugContext('sql:mysql');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, {\n      showWarnings: false,\n      ...options\n    });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n\n      return undefined;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const {\n      connection,\n      options\n    } = this;\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n\n    try {\n      if (parameters && parameters.length) {\n        results = await new Promise((resolve, reject) => {\n          connection.execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result)).setMaxListeners(100);\n        });\n      } else {\n        results = await new Promise((resolve, reject) => {\n          connection.query({\n            sql\n          }, (error, result) => error ? reject(error) : resolve(result)).setMaxListeners(100);\n        });\n      }\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MySQL automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {// Ignore errors - since MySQL automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n\n    return this.formatResults(results);\n  }\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n\n\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (data.constructor.name === 'ResultSetHeader' && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({\n              [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i\n            });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra') && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n\n      return result;\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n\n    if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MySQL Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n    return results;\n  }\n\n  formatError(err) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n          let fields = {};\n          let message = 'Validation error';\n          const values = match ? match[1].split('-') : undefined;\n          const fieldKey = match ? match[2] : undefined;\n          const fieldVal = match ? match[1] : undefined;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n          if (uniqueKey) {\n            if (uniqueKey.msg) message = uniqueKey.msg;\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n\n          const errors = [];\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field, value, this.instance, 'not_unique'));\n          });\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields\n          });\n        }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW:\n        {\n          // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : '`';\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n            table: match ? match[4] : undefined,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n            index: match ? match[2] : undefined,\n            parent: err\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"sources":["/Users/albab/bookapro/amazon/node_modules/sequelize/lib/dialects/mysql/query.js"],"names":["AbstractQuery","require","sequelizeErrors","_","logger","ER_DUP_ENTRY","ER_DEADLOCK","ER_ROW_IS_REFERENCED","ER_NO_REFERENCED_ROW","debug","debugContext","Query","constructor","connection","sequelize","options","showWarnings","formatBindParameters","sql","values","dialect","bindParam","replacementFunc","match","key","values_","undefined","push","length","run","parameters","complete","_logQuery","results","Promise","resolve","reject","execute","error","result","setMaxListeners","query","transaction","errno","rollback","error_","finished","formatError","warningStatus","logWarnings","formatResults","data","instance","isInsertQuery","handleInsertQuery","name","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","i","affectedRows","field","isSelectQuery","handleSelectQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","enumRegex","Field","type","test","Type","replace","toUpperCase","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","Object","prototype","hasOwnProperty","call","Extra","toLowerCase","comment","Comment","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isVersionQuery","version","isForeignKeysQuery","isUpsertQuery","isUpdateQuery","isShowConstraintsQuery","isRawQuery","warningResults","warningMessage","uuid","messages","_warningRow","Symbol","iterator","_warningResult","Message","_objectKey","keys","join","log","err","errCode","code","message","fields","split","fieldKey","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","value","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","String","table","index","DatabaseError","reduce","acc","item","Key_name","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","column_name","map","primary","tableName","Table","unique","Non_unique","Index_type","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mysql');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n\n    try {\n      if (parameters && parameters.length) {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      } else {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .query({ sql }, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      }\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MySQL automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // Ignore errors - since MySQL automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MySQL Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}