{"ast":null,"code":"import Parchment from 'parchment';\nimport Block from '../blots/block';\nimport Container from '../blots/container';\n\nclass ListItem extends Block {\n  static formats(domNode) {\n    return domNode.tagName === this.tagName ? undefined : super.formats(domNode);\n  }\n\n  format(name, value) {\n    if (name === List.blotName && !value) {\n      this.replaceWith(Parchment.create(this.statics.scope));\n    } else {\n      super.format(name, value);\n    }\n  }\n\n  remove() {\n    if (this.prev == null && this.next == null) {\n      this.parent.remove();\n    } else {\n      super.remove();\n    }\n  }\n\n  replaceWith(name, value) {\n    this.parent.isolate(this.offset(this.parent), this.length());\n\n    if (name === this.parent.statics.blotName) {\n      this.parent.replaceWith(name, value);\n      return this;\n    } else {\n      this.parent.unwrap();\n      return super.replaceWith(name, value);\n    }\n  }\n\n}\n\nListItem.blotName = 'list-item';\nListItem.tagName = 'LI';\n\nclass List extends Container {\n  static create(value) {\n    let tagName = value === 'ordered' ? 'OL' : 'UL';\n    let node = super.create(tagName);\n\n    if (value === 'checked' || value === 'unchecked') {\n      node.setAttribute('data-checked', value === 'checked');\n    }\n\n    return node;\n  }\n\n  static formats(domNode) {\n    if (domNode.tagName === 'OL') return 'ordered';\n\n    if (domNode.tagName === 'UL') {\n      if (domNode.hasAttribute('data-checked')) {\n        return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';\n      } else {\n        return 'bullet';\n      }\n    }\n\n    return undefined;\n  }\n\n  constructor(domNode) {\n    super(domNode);\n\n    const listEventHandler = e => {\n      if (e.target.parentNode !== domNode) return;\n      let format = this.statics.formats(domNode);\n      let blot = Parchment.find(e.target);\n\n      if (format === 'checked') {\n        blot.format('list', 'unchecked');\n      } else if (format === 'unchecked') {\n        blot.format('list', 'checked');\n      }\n    };\n\n    domNode.addEventListener('touchstart', listEventHandler);\n    domNode.addEventListener('mousedown', listEventHandler);\n  }\n\n  format(name, value) {\n    if (this.children.length > 0) {\n      this.children.tail.format(name, value);\n    }\n  }\n\n  formats() {\n    // We don't inherit from FormatBlot\n    return {\n      [this.statics.blotName]: this.statics.formats(this.domNode)\n    };\n  }\n\n  insertBefore(blot, ref) {\n    if (blot instanceof ListItem) {\n      super.insertBefore(blot, ref);\n    } else {\n      let index = ref == null ? this.length() : ref.offset(this);\n      let after = this.split(index);\n      after.parent.insertBefore(blot, after);\n    }\n  }\n\n  optimize(context) {\n    super.optimize(context);\n    let next = this.next;\n\n    if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {\n      next.moveChildren(this);\n      next.remove();\n    }\n  }\n\n  replace(target) {\n    if (target.statics.blotName !== this.statics.blotName) {\n      let item = Parchment.create(this.statics.defaultChild);\n      target.moveChildren(item);\n      this.appendChild(item);\n    }\n\n    super.replace(target);\n  }\n\n}\n\nList.blotName = 'list';\nList.scope = Parchment.Scope.BLOCK_BLOT;\nList.tagName = ['OL', 'UL'];\nList.defaultChild = 'list-item';\nList.allowedChildren = [ListItem];\nexport { ListItem, List as default };","map":{"version":3,"sources":["/Users/albab/bookapro/amazon/src/assets/vendor/quill/formats/list.js"],"names":["Parchment","Block","Container","ListItem","formats","domNode","tagName","undefined","format","name","value","List","blotName","replaceWith","create","statics","scope","remove","prev","next","parent","isolate","offset","length","unwrap","node","setAttribute","hasAttribute","getAttribute","constructor","listEventHandler","e","target","parentNode","blot","find","addEventListener","children","tail","insertBefore","ref","index","after","split","optimize","context","moveChildren","replace","item","defaultChild","appendChild","Scope","BLOCK_BLOT","allowedChildren","default"],"mappings":"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","sourcesContent":["import Parchment from 'parchment';\nimport Block from '../blots/block';\nimport Container from '../blots/container';\n\n\nclass ListItem extends Block {\n  static formats(domNode) {\n    return domNode.tagName === this.tagName ? undefined : super.formats(domNode);\n  }\n\n  format(name, value) {\n    if (name === List.blotName && !value) {\n      this.replaceWith(Parchment.create(this.statics.scope));\n    } else {\n      super.format(name, value);\n    }\n  }\n\n  remove() {\n    if (this.prev == null && this.next == null) {\n      this.parent.remove();\n    } else {\n      super.remove();\n    }\n  }\n\n  replaceWith(name, value) {\n    this.parent.isolate(this.offset(this.parent), this.length());\n    if (name === this.parent.statics.blotName) {\n      this.parent.replaceWith(name, value);\n      return this;\n    } else {\n      this.parent.unwrap();\n      return super.replaceWith(name, value);\n    }\n  }\n}\nListItem.blotName = 'list-item';\nListItem.tagName = 'LI';\n\n\nclass List extends Container {\n  static create(value) {\n    let tagName = value === 'ordered' ? 'OL' : 'UL';\n    let node = super.create(tagName);\n    if (value === 'checked' || value === 'unchecked') {\n      node.setAttribute('data-checked', value === 'checked');\n    }\n    return node;\n  }\n\n  static formats(domNode) {\n    if (domNode.tagName === 'OL') return 'ordered';\n    if (domNode.tagName === 'UL') {\n      if (domNode.hasAttribute('data-checked')) {\n        return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';\n      } else {\n        return 'bullet';\n      }\n    }\n    return undefined;\n  }\n\n  constructor(domNode) {\n    super(domNode);\n    const listEventHandler = (e) => {\n      if (e.target.parentNode !== domNode) return;\n      let format = this.statics.formats(domNode);\n      let blot = Parchment.find(e.target);\n      if (format === 'checked') {\n        blot.format('list', 'unchecked');\n      } else if(format === 'unchecked') {\n        blot.format('list', 'checked');\n      }\n    }\n\n    domNode.addEventListener('touchstart', listEventHandler);\n    domNode.addEventListener('mousedown', listEventHandler);\n  }\n\n  format(name, value) {\n    if (this.children.length > 0) {\n      this.children.tail.format(name, value);\n    }\n  }\n\n  formats() {\n    // We don't inherit from FormatBlot\n    return { [this.statics.blotName]: this.statics.formats(this.domNode) };\n  }\n\n  insertBefore(blot, ref) {\n    if (blot instanceof ListItem) {\n      super.insertBefore(blot, ref);\n    } else {\n      let index = ref == null ? this.length() : ref.offset(this);\n      let after = this.split(index);\n      after.parent.insertBefore(blot, after);\n    }\n  }\n\n  optimize(context) {\n    super.optimize(context);\n    let next = this.next;\n    if (next != null && next.prev === this &&\n        next.statics.blotName === this.statics.blotName &&\n        next.domNode.tagName === this.domNode.tagName &&\n        next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {\n      next.moveChildren(this);\n      next.remove();\n    }\n  }\n\n  replace(target) {\n    if (target.statics.blotName !== this.statics.blotName) {\n      let item = Parchment.create(this.statics.defaultChild);\n      target.moveChildren(item);\n      this.appendChild(item);\n    }\n    super.replace(target);\n  }\n}\nList.blotName = 'list';\nList.scope = Parchment.Scope.BLOCK_BLOT;\nList.tagName = ['OL', 'UL'];\nList.defaultChild = 'list-item';\nList.allowedChildren = [ListItem];\n\n\nexport { ListItem, List as default };\n"]},"metadata":{},"sourceType":"module"}