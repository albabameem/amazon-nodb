{"ast":null,"code":"import Parchment from 'parchment';\nimport Quill from '../core/quill';\nimport Module from '../core/module';\nimport CodeBlock from '../formats/code';\n\nclass SyntaxCodeBlock extends CodeBlock {\n  replaceWith(block) {\n    this.domNode.textContent = this.domNode.textContent;\n    this.attach();\n    super.replaceWith(block);\n  }\n\n  highlight(highlight) {\n    let text = this.domNode.textContent;\n\n    if (this.cachedText !== text) {\n      if (text.trim().length > 0 || this.cachedText == null) {\n        this.domNode.innerHTML = highlight(text);\n        this.domNode.normalize();\n        this.attach();\n      }\n\n      this.cachedText = text;\n    }\n  }\n\n}\n\nSyntaxCodeBlock.className = 'ql-syntax';\nlet CodeToken = new Parchment.Attributor.Class('token', 'hljs', {\n  scope: Parchment.Scope.INLINE\n});\n\nclass Syntax extends Module {\n  static register() {\n    Quill.register(CodeToken, true);\n    Quill.register(SyntaxCodeBlock, true);\n  }\n\n  constructor(quill, options) {\n    super(quill, options);\n\n    if (typeof this.options.highlight !== 'function') {\n      throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');\n    }\n\n    let timer = null;\n    this.quill.on(Quill.events.SCROLL_OPTIMIZE, () => {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        this.highlight();\n        timer = null;\n      }, this.options.interval);\n    });\n    this.highlight();\n  }\n\n  highlight() {\n    if (this.quill.selection.composing) return;\n    this.quill.update(Quill.sources.USER);\n    let range = this.quill.getSelection();\n    this.quill.scroll.descendants(SyntaxCodeBlock).forEach(code => {\n      code.highlight(this.options.highlight);\n    });\n    this.quill.update(Quill.sources.SILENT);\n\n    if (range != null) {\n      this.quill.setSelection(range, Quill.sources.SILENT);\n    }\n  }\n\n}\n\nSyntax.DEFAULTS = {\n  highlight: function () {\n    if (window.hljs == null) return null;\n    return function (text) {\n      let result = window.hljs.highlightAuto(text);\n      return result.value;\n    };\n  }(),\n  interval: 1000\n};\nexport { SyntaxCodeBlock as CodeBlock, CodeToken, Syntax as default };","map":{"version":3,"sources":["/Users/albab/bookapro/amazon/src/assets/vendor/quill/modules/syntax.js"],"names":["Parchment","Quill","Module","CodeBlock","SyntaxCodeBlock","replaceWith","block","domNode","textContent","attach","highlight","text","cachedText","trim","length","innerHTML","normalize","className","CodeToken","Attributor","Class","scope","Scope","INLINE","Syntax","register","constructor","quill","options","Error","timer","on","events","SCROLL_OPTIMIZE","clearTimeout","setTimeout","interval","selection","composing","update","sources","USER","range","getSelection","scroll","descendants","forEach","code","SILENT","setSelection","DEFAULTS","window","hljs","result","highlightAuto","value","default"],"mappings":"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","sourcesContent":["import Parchment from 'parchment';\nimport Quill from '../core/quill';\nimport Module from '../core/module';\nimport CodeBlock from '../formats/code';\n\n\nclass SyntaxCodeBlock extends CodeBlock {\n  replaceWith(block) {\n    this.domNode.textContent = this.domNode.textContent;\n    this.attach();\n    super.replaceWith(block);\n  }\n\n  highlight(highlight) {\n    let text = this.domNode.textContent;\n    if (this.cachedText !== text) {\n      if (text.trim().length > 0 || this.cachedText == null) {\n        this.domNode.innerHTML = highlight(text);\n        this.domNode.normalize();\n        this.attach();\n      }\n      this.cachedText = text;\n    }\n  }\n}\nSyntaxCodeBlock.className = 'ql-syntax';\n\n\nlet CodeToken = new Parchment.Attributor.Class('token', 'hljs', {\n  scope: Parchment.Scope.INLINE\n});\n\n\nclass Syntax extends Module {\n  static register() {\n    Quill.register(CodeToken, true);\n    Quill.register(SyntaxCodeBlock, true);\n  }\n\n  constructor(quill, options) {\n    super(quill, options);\n    if (typeof this.options.highlight !== 'function') {\n      throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');\n    }\n    let timer = null;\n    this.quill.on(Quill.events.SCROLL_OPTIMIZE, () => {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        this.highlight();\n        timer = null;\n      }, this.options.interval);\n    });\n    this.highlight();\n  }\n\n  highlight() {\n    if (this.quill.selection.composing) return;\n    this.quill.update(Quill.sources.USER);\n    let range = this.quill.getSelection();\n    this.quill.scroll.descendants(SyntaxCodeBlock).forEach((code) => {\n      code.highlight(this.options.highlight);\n    });\n    this.quill.update(Quill.sources.SILENT);\n    if (range != null) {\n      this.quill.setSelection(range, Quill.sources.SILENT);\n    }\n  }\n}\nSyntax.DEFAULTS = {\n  highlight: (function() {\n    if (window.hljs == null) return null;\n    return function(text) {\n      let result = window.hljs.highlightAuto(text);\n      return result.value;\n    };\n  })(),\n  interval: 1000\n};\n\n\nexport { SyntaxCodeBlock as CodeBlock, CodeToken, Syntax as default};\n"]},"metadata":{},"sourceType":"module"}