{"ast":null,"code":"define(['./select', '../utils', 'jquery'], function (SelectAdapter, Utils, $) {\n  function ArrayAdapter($element, options) {\n    this._dataToConvert = options.get('data') || [];\n\n    ArrayAdapter.__super__.constructor.call(this, $element, options);\n  }\n\n  Utils.Extend(ArrayAdapter, SelectAdapter);\n\n  ArrayAdapter.prototype.bind = function (container, $container) {\n    ArrayAdapter.__super__.bind.call(this, container, $container);\n\n    this.addOptions(this.convertToOptions(this._dataToConvert));\n  };\n\n  ArrayAdapter.prototype.select = function (data) {\n    var $option = this.$element.find('option').filter(function (i, elm) {\n      return elm.value == data.id.toString();\n    });\n\n    if ($option.length === 0) {\n      $option = this.option(data);\n      this.addOptions($option);\n    }\n\n    ArrayAdapter.__super__.select.call(this, data);\n  };\n\n  ArrayAdapter.prototype.convertToOptions = function (data) {\n    var self = this;\n    var $existing = this.$element.find('option');\n    var existingIds = $existing.map(function () {\n      return self.item($(this)).id;\n    }).get();\n    var $options = []; // Filter out all items except for the one passed in the argument\n\n    function onlyItem(item) {\n      return function () {\n        return $(this).val() == item.id;\n      };\n    }\n\n    for (var d = 0; d < data.length; d++) {\n      var item = this._normalizeItem(data[d]); // Skip items which were pre-loaded, only merge the data\n\n\n      if ($.inArray(item.id, existingIds) >= 0) {\n        var $existingOption = $existing.filter(onlyItem(item));\n        var existingData = this.item($existingOption);\n        var newData = $.extend(true, {}, item, existingData);\n        var $newOption = this.option(newData);\n        $existingOption.replaceWith($newOption);\n        continue;\n      }\n\n      var $option = this.option(item);\n\n      if (item.children) {\n        var $children = this.convertToOptions(item.children);\n        Utils.appendMany($option, $children);\n      }\n\n      $options.push($option);\n    }\n\n    return $options;\n  };\n\n  return ArrayAdapter;\n});","map":{"version":3,"sources":["/Users/albab/bookapro/amazon/src/assets/vendor/select2/src/js/select2/data/array.js"],"names":["define","SelectAdapter","Utils","$","ArrayAdapter","$element","options","_dataToConvert","get","__super__","constructor","call","Extend","prototype","bind","container","$container","addOptions","convertToOptions","select","data","$option","find","filter","i","elm","value","id","toString","length","option","self","$existing","existingIds","map","item","$options","onlyItem","val","d","_normalizeItem","inArray","$existingOption","existingData","newData","extend","$newOption","replaceWith","children","$children","appendMany","push"],"mappings":"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","sourcesContent":["define([\n  './select',\n  '../utils',\n  'jquery'\n], function (SelectAdapter, Utils, $) {\n  function ArrayAdapter ($element, options) {\n    this._dataToConvert = options.get('data') || [];\n\n    ArrayAdapter.__super__.constructor.call(this, $element, options);\n  }\n\n  Utils.Extend(ArrayAdapter, SelectAdapter);\n\n  ArrayAdapter.prototype.bind = function (container, $container) {\n    ArrayAdapter.__super__.bind.call(this, container, $container);\n\n    this.addOptions(this.convertToOptions(this._dataToConvert));\n  };\n\n  ArrayAdapter.prototype.select = function (data) {\n    var $option = this.$element.find('option').filter(function (i, elm) {\n      return elm.value == data.id.toString();\n    });\n\n    if ($option.length === 0) {\n      $option = this.option(data);\n\n      this.addOptions($option);\n    }\n\n    ArrayAdapter.__super__.select.call(this, data);\n  };\n\n  ArrayAdapter.prototype.convertToOptions = function (data) {\n    var self = this;\n\n    var $existing = this.$element.find('option');\n    var existingIds = $existing.map(function () {\n      return self.item($(this)).id;\n    }).get();\n\n    var $options = [];\n\n    // Filter out all items except for the one passed in the argument\n    function onlyItem (item) {\n      return function () {\n        return $(this).val() == item.id;\n      };\n    }\n\n    for (var d = 0; d < data.length; d++) {\n      var item = this._normalizeItem(data[d]);\n\n      // Skip items which were pre-loaded, only merge the data\n      if ($.inArray(item.id, existingIds) >= 0) {\n        var $existingOption = $existing.filter(onlyItem(item));\n\n        var existingData = this.item($existingOption);\n        var newData = $.extend(true, {}, item, existingData);\n\n        var $newOption = this.option(newData);\n\n        $existingOption.replaceWith($newOption);\n\n        continue;\n      }\n\n      var $option = this.option(item);\n\n      if (item.children) {\n        var $children = this.convertToOptions(item.children);\n\n        Utils.appendMany($option, $children);\n      }\n\n      $options.push($option);\n    }\n\n    return $options;\n  };\n\n  return ArrayAdapter;\n});\n"]},"metadata":{},"sourceType":"module"}