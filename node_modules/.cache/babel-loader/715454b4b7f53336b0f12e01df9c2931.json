{"ast":null,"code":"import extend from 'extend';\nimport Delta from 'quill-delta';\nimport Parchment from 'parchment';\nimport Quill from '../core/quill';\nimport logger from '../core/logger';\nimport Module from '../core/module';\nimport { AlignAttribute, AlignStyle } from '../formats/align';\nimport { BackgroundStyle } from '../formats/background';\nimport CodeBlock from '../formats/code';\nimport { ColorStyle } from '../formats/color';\nimport { DirectionAttribute, DirectionStyle } from '../formats/direction';\nimport { FontStyle } from '../formats/font';\nimport { SizeStyle } from '../formats/size';\nlet debug = logger('quill:clipboard');\nconst DOM_KEY = '__ql-matcher';\nconst CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];\nconst ATTRIBUTE_ATTRIBUTORS = [AlignAttribute, DirectionAttribute].reduce(_c = function (memo, attr) {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\n_c2 = ATTRIBUTE_ATTRIBUTORS;\nconst STYLE_ATTRIBUTORS = [AlignStyle, BackgroundStyle, ColorStyle, DirectionStyle, FontStyle, SizeStyle].reduce(_c3 = function (memo, attr) {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\n_c4 = STYLE_ATTRIBUTORS;\n\nclass Clipboard extends Module {\n  constructor(quill, options) {\n    super(quill, options);\n    this.quill.root.addEventListener('paste', this.onPaste.bind(this));\n    this.container = this.quill.addContainer('ql-clipboard');\n    this.container.setAttribute('contenteditable', true);\n    this.container.setAttribute('tabindex', -1);\n    this.matchers = [];\n    CLIPBOARD_CONFIG.concat(this.options.matchers).forEach(([selector, matcher]) => {\n      if (!options.matchVisual && matcher === matchSpacing) return;\n      this.addMatcher(selector, matcher);\n    });\n  }\n\n  addMatcher(selector, matcher) {\n    this.matchers.push([selector, matcher]);\n  }\n\n  convert(html) {\n    if (typeof html === 'string') {\n      this.container.innerHTML = html.replace(/\\>\\r?\\n +\\</g, '><'); // Remove spaces between tags\n\n      return this.convert();\n    }\n\n    const formats = this.quill.getFormat(this.quill.selection.savedRange.index);\n\n    if (formats[CodeBlock.blotName]) {\n      const text = this.container.innerText;\n      this.container.innerHTML = '';\n      return new Delta().insert(text, {\n        [CodeBlock.blotName]: formats[CodeBlock.blotName]\n      });\n    }\n\n    let [elementMatchers, textMatchers] = this.prepareMatching();\n    let delta = traverse(this.container, elementMatchers, textMatchers); // Remove trailing newline\n\n    if (deltaEndsWith(delta, '\\n') && delta.ops[delta.ops.length - 1].attributes == null) {\n      delta = delta.compose(new Delta().retain(delta.length() - 1).delete(1));\n    }\n\n    debug.log('convert', this.container.innerHTML, delta);\n    this.container.innerHTML = '';\n    return delta;\n  }\n\n  dangerouslyPasteHTML(index, html, source = Quill.sources.API) {\n    if (typeof index === 'string') {\n      this.quill.setContents(this.convert(index), html);\n      this.quill.setSelection(0, Quill.sources.SILENT);\n    } else {\n      let paste = this.convert(html);\n      this.quill.updateContents(new Delta().retain(index).concat(paste), source);\n      this.quill.setSelection(index + paste.length(), Quill.sources.SILENT);\n    }\n  }\n\n  onPaste(e) {\n    if (e.defaultPrevented || !this.quill.isEnabled()) return;\n    let range = this.quill.getSelection();\n    let delta = new Delta().retain(range.index);\n    let scrollTop = this.quill.scrollingContainer.scrollTop;\n    this.container.focus();\n    this.quill.selection.update(Quill.sources.SILENT);\n    setTimeout(() => {\n      delta = delta.concat(this.convert()).delete(range.length);\n      this.quill.updateContents(delta, Quill.sources.USER); // range.length contributes to delta.length()\n\n      this.quill.setSelection(delta.length() - range.length, Quill.sources.SILENT);\n      this.quill.scrollingContainer.scrollTop = scrollTop;\n      this.quill.focus();\n    }, 1);\n  }\n\n  prepareMatching() {\n    let elementMatchers = [],\n        textMatchers = [];\n    this.matchers.forEach(pair => {\n      let [selector, matcher] = pair;\n\n      switch (selector) {\n        case Node.TEXT_NODE:\n          textMatchers.push(matcher);\n          break;\n\n        case Node.ELEMENT_NODE:\n          elementMatchers.push(matcher);\n          break;\n\n        default:\n          [].forEach.call(this.container.querySelectorAll(selector), node => {\n            // TODO use weakmap\n            node[DOM_KEY] = node[DOM_KEY] || [];\n            node[DOM_KEY].push(matcher);\n          });\n          break;\n      }\n    });\n    return [elementMatchers, textMatchers];\n  }\n\n}\n\nClipboard.DEFAULTS = {\n  matchers: [],\n  matchVisual: true\n};\n\nfunction applyFormat(delta, format, value) {\n  if (typeof format === 'object') {\n    return Object.keys(format).reduce(function (delta, key) {\n      return applyFormat(delta, key, format[key]);\n    }, delta);\n  } else {\n    return delta.reduce(function (delta, op) {\n      if (op.attributes && op.attributes[format]) {\n        return delta.push(op);\n      } else {\n        return delta.insert(op.insert, extend({}, {\n          [format]: value\n        }, op.attributes));\n      }\n    }, new Delta());\n  }\n}\n\nfunction computeStyle(node) {\n  if (node.nodeType !== Node.ELEMENT_NODE) return {};\n  const DOM_KEY = '__ql-computed-style';\n  return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));\n}\n\nfunction deltaEndsWith(delta, text) {\n  let endText = \"\";\n\n  for (let i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {\n    let op = delta.ops[i];\n    if (typeof op.insert !== 'string') break;\n    endText = op.insert + endText;\n  }\n\n  return endText.slice(-1 * text.length) === text;\n}\n\nfunction isLine(node) {\n  if (node.childNodes.length === 0) return false; // Exclude embed blocks\n\n  let style = computeStyle(node);\n  return ['block', 'list-item'].indexOf(style.display) > -1;\n}\n\nfunction traverse(node, elementMatchers, textMatchers) {\n  // Post-order\n  if (node.nodeType === node.TEXT_NODE) {\n    return textMatchers.reduce(function (delta, matcher) {\n      return matcher(node, delta);\n    }, new Delta());\n  } else if (node.nodeType === node.ELEMENT_NODE) {\n    return [].reduce.call(node.childNodes || [], (delta, childNode) => {\n      let childrenDelta = traverse(childNode, elementMatchers, textMatchers);\n\n      if (childNode.nodeType === node.ELEMENT_NODE) {\n        childrenDelta = elementMatchers.reduce(function (childrenDelta, matcher) {\n          return matcher(childNode, childrenDelta);\n        }, childrenDelta);\n        childrenDelta = (childNode[DOM_KEY] || []).reduce(function (childrenDelta, matcher) {\n          return matcher(childNode, childrenDelta);\n        }, childrenDelta);\n      }\n\n      return delta.concat(childrenDelta);\n    }, new Delta());\n  } else {\n    return new Delta();\n  }\n}\n\nfunction matchAlias(format, node, delta) {\n  return applyFormat(delta, format, true);\n}\n\nfunction matchAttributor(node, delta) {\n  let attributes = Parchment.Attributor.Attribute.keys(node);\n  let classes = Parchment.Attributor.Class.keys(node);\n  let styles = Parchment.Attributor.Style.keys(node);\n  let formats = {};\n  attributes.concat(classes).concat(styles).forEach(name => {\n    let attr = Parchment.query(name, Parchment.Scope.ATTRIBUTE);\n\n    if (attr != null) {\n      formats[attr.attrName] = attr.value(node);\n      if (formats[attr.attrName]) return;\n    }\n\n    attr = ATTRIBUTE_ATTRIBUTORS[name];\n\n    if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n      formats[attr.attrName] = attr.value(node) || undefined;\n    }\n\n    attr = STYLE_ATTRIBUTORS[name];\n\n    if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n      attr = STYLE_ATTRIBUTORS[name];\n      formats[attr.attrName] = attr.value(node) || undefined;\n    }\n  });\n\n  if (Object.keys(formats).length > 0) {\n    delta = applyFormat(delta, formats);\n  }\n\n  return delta;\n}\n\nfunction matchBlot(node, delta) {\n  let match = Parchment.query(node);\n  if (match == null) return delta;\n\n  if (match.prototype instanceof Parchment.Embed) {\n    let embed = {};\n    let value = match.value(node);\n\n    if (value != null) {\n      embed[match.blotName] = value;\n      delta = new Delta().insert(embed, match.formats(node));\n    }\n  } else if (typeof match.formats === 'function') {\n    delta = applyFormat(delta, match.blotName, match.formats(node));\n  }\n\n  return delta;\n}\n\nfunction matchBreak(node, delta) {\n  if (!deltaEndsWith(delta, '\\n')) {\n    delta.insert('\\n');\n  }\n\n  return delta;\n}\n\nfunction matchIgnore() {\n  return new Delta();\n}\n\nfunction matchIndent(node, delta) {\n  let match = Parchment.query(node);\n\n  if (match == null || match.blotName !== 'list-item' || !deltaEndsWith(delta, '\\n')) {\n    return delta;\n  }\n\n  let indent = -1,\n      parent = node.parentNode;\n\n  while (!parent.classList.contains('ql-clipboard')) {\n    if ((Parchment.query(parent) || {}).blotName === 'list') {\n      indent += 1;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  if (indent <= 0) return delta;\n  return delta.compose(new Delta().retain(delta.length() - 1).retain(1, {\n    indent: indent\n  }));\n}\n\nfunction matchNewline(node, delta) {\n  if (!deltaEndsWith(delta, '\\n')) {\n    if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {\n      delta.insert('\\n');\n    }\n  }\n\n  return delta;\n}\n\nfunction matchSpacing(node, delta) {\n  if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\\n\\n')) {\n    let nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);\n\n    if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {\n      delta.insert('\\n');\n    }\n  }\n\n  return delta;\n}\n\nfunction matchStyles(node, delta) {\n  let formats = {};\n  let style = node.style || {};\n\n  if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {\n    formats.italic = true;\n  }\n\n  if (style.fontWeight && (computeStyle(node).fontWeight.startsWith('bold') || parseInt(computeStyle(node).fontWeight) >= 700)) {\n    formats.bold = true;\n  }\n\n  if (Object.keys(formats).length > 0) {\n    delta = applyFormat(delta, formats);\n  }\n\n  if (parseFloat(style.textIndent || 0) > 0) {\n    // Could be 0.5in\n    delta = new Delta().insert('\\t').concat(delta);\n  }\n\n  return delta;\n}\n\nfunction matchText(node, delta) {\n  let text = node.data; // Word represents empty line with <o:p>&nbsp;</o:p>\n\n  if (node.parentNode.tagName === 'O:P') {\n    return delta.insert(text.trim());\n  }\n\n  if (text.trim().length === 0 && node.parentNode.classList.contains('ql-clipboard')) {\n    return delta;\n  }\n\n  if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {\n    // eslint-disable-next-line func-style\n    let replacer = function (collapse, match) {\n      match = match.replace(/[^\\u00a0]/g, ''); // \\u00a0 is nbsp;\n\n      return match.length < 1 && collapse ? ' ' : match;\n    };\n\n    text = text.replace(/\\r\\n/g, ' ').replace(/\\n/g, ' ');\n    text = text.replace(/\\s\\s+/g, replacer.bind(replacer, true)); // collapse whitespace\n\n    if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {\n      text = text.replace(/^\\s+/, replacer.bind(replacer, false));\n    }\n\n    if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {\n      text = text.replace(/\\s+$/, replacer.bind(replacer, false));\n    }\n  }\n\n  return delta.insert(text);\n}\n\nexport { Clipboard as default, matchAttributor, matchBlot, matchNewline, matchSpacing, matchText };\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ATTRIBUTE_ATTRIBUTORS$[\\n  AlignAttribute,\\n  DirectionAttribute\\n].reduce\");\n$RefreshReg$(_c2, \"ATTRIBUTE_ATTRIBUTORS\");\n$RefreshReg$(_c3, \"STYLE_ATTRIBUTORS$[\\n  AlignStyle,\\n  BackgroundStyle,\\n  ColorStyle,\\n  DirectionStyle,\\n  FontStyle,\\n  SizeStyle\\n].reduce\");\n$RefreshReg$(_c4, \"STYLE_ATTRIBUTORS\");","map":{"version":3,"sources":["/Users/albab/bookapro/amazon/src/assets/vendor/quill/modules/clipboard.js"],"names":["extend","Delta","Parchment","Quill","logger","Module","AlignAttribute","AlignStyle","BackgroundStyle","CodeBlock","ColorStyle","DirectionAttribute","DirectionStyle","FontStyle","SizeStyle","debug","DOM_KEY","CLIPBOARD_CONFIG","Node","TEXT_NODE","matchText","matchNewline","matchBreak","ELEMENT_NODE","matchBlot","matchSpacing","matchAttributor","matchStyles","matchIndent","matchAlias","bind","matchIgnore","ATTRIBUTE_ATTRIBUTORS","reduce","memo","attr","keyName","STYLE_ATTRIBUTORS","Clipboard","constructor","quill","options","root","addEventListener","onPaste","container","addContainer","setAttribute","matchers","concat","forEach","selector","matcher","matchVisual","addMatcher","push","convert","html","innerHTML","replace","formats","getFormat","selection","savedRange","index","blotName","text","innerText","insert","elementMatchers","textMatchers","prepareMatching","delta","traverse","deltaEndsWith","ops","length","attributes","compose","retain","delete","log","dangerouslyPasteHTML","source","sources","API","setContents","setSelection","SILENT","paste","updateContents","e","defaultPrevented","isEnabled","range","getSelection","scrollTop","scrollingContainer","focus","update","setTimeout","USER","pair","call","querySelectorAll","node","DEFAULTS","applyFormat","format","value","Object","keys","key","op","computeStyle","nodeType","window","getComputedStyle","endText","i","slice","isLine","childNodes","style","indexOf","display","childNode","childrenDelta","Attributor","Attribute","classes","Class","styles","Style","name","query","Scope","ATTRIBUTE","attrName","undefined","match","prototype","Embed","embed","indent","parent","parentNode","classList","contains","nextSibling","nextElementSibling","nodeHeight","offsetHeight","parseFloat","marginTop","marginBottom","offsetTop","fontStyle","italic","fontWeight","startsWith","parseInt","bold","textIndent","data","tagName","trim","whiteSpace","replacer","collapse","previousSibling","default"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,kBAA3C;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,kBAAT,EAA6BC,cAA7B,QAAmD,sBAAnD;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,IAAIC,KAAK,GAAGX,MAAM,CAAC,iBAAD,CAAlB;AAGA,MAAMY,OAAO,GAAG,cAAhB;AAEA,MAAMC,gBAAgB,GAAG,CACvB,CAACC,IAAI,CAACC,SAAN,EAAiBC,SAAjB,CADuB,EAEvB,CAACF,IAAI,CAACC,SAAN,EAAiBE,YAAjB,CAFuB,EAGvB,CAAC,IAAD,EAAOC,UAAP,CAHuB,EAIvB,CAACJ,IAAI,CAACK,YAAN,EAAoBF,YAApB,CAJuB,EAKvB,CAACH,IAAI,CAACK,YAAN,EAAoBC,SAApB,CALuB,EAMvB,CAACN,IAAI,CAACK,YAAN,EAAoBE,YAApB,CANuB,EAOvB,CAACP,IAAI,CAACK,YAAN,EAAoBG,eAApB,CAPuB,EAQvB,CAACR,IAAI,CAACK,YAAN,EAAoBI,WAApB,CARuB,EASvB,CAAC,IAAD,EAAOC,WAAP,CATuB,EAUvB,CAAC,GAAD,EAAMC,UAAU,CAACC,IAAX,CAAgBD,UAAhB,EAA4B,MAA5B,CAAN,CAVuB,EAWvB,CAAC,GAAD,EAAMA,UAAU,CAACC,IAAX,CAAgBD,UAAhB,EAA4B,QAA5B,CAAN,CAXuB,EAYvB,CAAC,OAAD,EAAUE,WAAV,CAZuB,CAAzB;AAeA,MAAMC,qBAAqB,GAAG,CAC5B1B,cAD4B,EAE5BK,kBAF4B,EAG5BsB,MAH4B,MAGrB,UAASC,IAAT,EAAeC,IAAf,EAAqB;AAC5BD,EAAAA,IAAI,CAACC,IAAI,CAACC,OAAN,CAAJ,GAAqBD,IAArB;AACA,SAAOD,IAAP;AACD,CAN6B,EAM3B,EAN2B,CAA9B;MAAMF,qB;AAQN,MAAMK,iBAAiB,GAAG,CACxB9B,UADwB,EAExBC,eAFwB,EAGxBE,UAHwB,EAIxBE,cAJwB,EAKxBC,SALwB,EAMxBC,SANwB,EAOxBmB,MAPwB,OAOjB,UAASC,IAAT,EAAeC,IAAf,EAAqB;AAC5BD,EAAAA,IAAI,CAACC,IAAI,CAACC,OAAN,CAAJ,GAAqBD,IAArB;AACA,SAAOD,IAAP;AACD,CAVyB,EAUvB,EAVuB,CAA1B;MAAMG,iB;;AAaN,MAAMC,SAAN,SAAwBjC,MAAxB,CAA+B;AAC7BkC,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,UAAMD,KAAN,EAAaC,OAAb;AACA,SAAKD,KAAL,CAAWE,IAAX,CAAgBC,gBAAhB,CAAiC,OAAjC,EAA0C,KAAKC,OAAL,CAAad,IAAb,CAAkB,IAAlB,CAA1C;AACA,SAAKe,SAAL,GAAiB,KAAKL,KAAL,CAAWM,YAAX,CAAwB,cAAxB,CAAjB;AACA,SAAKD,SAAL,CAAeE,YAAf,CAA4B,iBAA5B,EAA+C,IAA/C;AACA,SAAKF,SAAL,CAAeE,YAAf,CAA4B,UAA5B,EAAwC,CAAC,CAAzC;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA/B,IAAAA,gBAAgB,CAACgC,MAAjB,CAAwB,KAAKR,OAAL,CAAaO,QAArC,EAA+CE,OAA/C,CAAuD,CAAC,CAACC,QAAD,EAAWC,OAAX,CAAD,KAAyB;AAC9E,UAAI,CAACX,OAAO,CAACY,WAAT,IAAwBD,OAAO,KAAK3B,YAAxC,EAAsD;AACtD,WAAK6B,UAAL,CAAgBH,QAAhB,EAA0BC,OAA1B;AACD,KAHD;AAID;;AAEDE,EAAAA,UAAU,CAACH,QAAD,EAAWC,OAAX,EAAoB;AAC5B,SAAKJ,QAAL,CAAcO,IAAd,CAAmB,CAACJ,QAAD,EAAWC,OAAX,CAAnB;AACD;;AAEDI,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAKZ,SAAL,CAAea,SAAf,GAA2BD,IAAI,CAACE,OAAL,CAAa,cAAb,EAA6B,IAA7B,CAA3B,CAD4B,CACmC;;AAC/D,aAAO,KAAKH,OAAL,EAAP;AACD;;AACD,UAAMI,OAAO,GAAG,KAAKpB,KAAL,CAAWqB,SAAX,CAAqB,KAAKrB,KAAL,CAAWsB,SAAX,CAAqBC,UAArB,CAAgCC,KAArD,CAAhB;;AACA,QAAIJ,OAAO,CAACnD,SAAS,CAACwD,QAAX,CAAX,EAAiC;AAC/B,YAAMC,IAAI,GAAG,KAAKrB,SAAL,CAAesB,SAA5B;AACA,WAAKtB,SAAL,CAAea,SAAf,GAA2B,EAA3B;AACA,aAAO,IAAIzD,KAAJ,GAAYmE,MAAZ,CAAmBF,IAAnB,EAAyB;AAAE,SAACzD,SAAS,CAACwD,QAAX,GAAsBL,OAAO,CAACnD,SAAS,CAACwD,QAAX;AAA/B,OAAzB,CAAP;AACD;;AACD,QAAI,CAACI,eAAD,EAAkBC,YAAlB,IAAkC,KAAKC,eAAL,EAAtC;AACA,QAAIC,KAAK,GAAGC,QAAQ,CAAC,KAAK5B,SAAN,EAAiBwB,eAAjB,EAAkCC,YAAlC,CAApB,CAZY,CAaZ;;AACA,QAAII,aAAa,CAACF,KAAD,EAAQ,IAAR,CAAb,IAA8BA,KAAK,CAACG,GAAN,CAAUH,KAAK,CAACG,GAAN,CAAUC,MAAV,GAAmB,CAA7B,EAAgCC,UAAhC,IAA8C,IAAhF,EAAsF;AACpFL,MAAAA,KAAK,GAAGA,KAAK,CAACM,OAAN,CAAc,IAAI7E,KAAJ,GAAY8E,MAAZ,CAAmBP,KAAK,CAACI,MAAN,KAAiB,CAApC,EAAuCI,MAAvC,CAA8C,CAA9C,CAAd,CAAR;AACD;;AACDjE,IAAAA,KAAK,CAACkE,GAAN,CAAU,SAAV,EAAqB,KAAKpC,SAAL,CAAea,SAApC,EAA+Cc,KAA/C;AACA,SAAK3B,SAAL,CAAea,SAAf,GAA2B,EAA3B;AACA,WAAOc,KAAP;AACD;;AAEDU,EAAAA,oBAAoB,CAAClB,KAAD,EAAQP,IAAR,EAAc0B,MAAM,GAAGhF,KAAK,CAACiF,OAAN,CAAcC,GAArC,EAA0C;AAC5D,QAAI,OAAOrB,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAKxB,KAAL,CAAW8C,WAAX,CAAuB,KAAK9B,OAAL,CAAaQ,KAAb,CAAvB,EAA4CP,IAA5C;AACA,WAAKjB,KAAL,CAAW+C,YAAX,CAAwB,CAAxB,EAA2BpF,KAAK,CAACiF,OAAN,CAAcI,MAAzC;AACD,KAHD,MAGO;AACL,UAAIC,KAAK,GAAG,KAAKjC,OAAL,CAAaC,IAAb,CAAZ;AACA,WAAKjB,KAAL,CAAWkD,cAAX,CAA0B,IAAIzF,KAAJ,GAAY8E,MAAZ,CAAmBf,KAAnB,EAA0Bf,MAA1B,CAAiCwC,KAAjC,CAA1B,EAAmEN,MAAnE;AACA,WAAK3C,KAAL,CAAW+C,YAAX,CAAwBvB,KAAK,GAAGyB,KAAK,CAACb,MAAN,EAAhC,EAAgDzE,KAAK,CAACiF,OAAN,CAAcI,MAA9D;AACD;AACF;;AAED5C,EAAAA,OAAO,CAAC+C,CAAD,EAAI;AACT,QAAIA,CAAC,CAACC,gBAAF,IAAsB,CAAC,KAAKpD,KAAL,CAAWqD,SAAX,EAA3B,EAAmD;AACnD,QAAIC,KAAK,GAAG,KAAKtD,KAAL,CAAWuD,YAAX,EAAZ;AACA,QAAIvB,KAAK,GAAG,IAAIvE,KAAJ,GAAY8E,MAAZ,CAAmBe,KAAK,CAAC9B,KAAzB,CAAZ;AACA,QAAIgC,SAAS,GAAG,KAAKxD,KAAL,CAAWyD,kBAAX,CAA8BD,SAA9C;AACA,SAAKnD,SAAL,CAAeqD,KAAf;AACA,SAAK1D,KAAL,CAAWsB,SAAX,CAAqBqC,MAArB,CAA4BhG,KAAK,CAACiF,OAAN,CAAcI,MAA1C;AACAY,IAAAA,UAAU,CAAC,MAAM;AACf5B,MAAAA,KAAK,GAAGA,KAAK,CAACvB,MAAN,CAAa,KAAKO,OAAL,EAAb,EAA6BwB,MAA7B,CAAoCc,KAAK,CAAClB,MAA1C,CAAR;AACA,WAAKpC,KAAL,CAAWkD,cAAX,CAA0BlB,KAA1B,EAAiCrE,KAAK,CAACiF,OAAN,CAAciB,IAA/C,EAFe,CAGf;;AACA,WAAK7D,KAAL,CAAW+C,YAAX,CAAwBf,KAAK,CAACI,MAAN,KAAiBkB,KAAK,CAAClB,MAA/C,EAAuDzE,KAAK,CAACiF,OAAN,CAAcI,MAArE;AACA,WAAKhD,KAAL,CAAWyD,kBAAX,CAA8BD,SAA9B,GAA0CA,SAA1C;AACA,WAAKxD,KAAL,CAAW0D,KAAX;AACD,KAPS,EAOP,CAPO,CAAV;AAQD;;AAED3B,EAAAA,eAAe,GAAG;AAChB,QAAIF,eAAe,GAAG,EAAtB;AAAA,QAA0BC,YAAY,GAAG,EAAzC;AACA,SAAKtB,QAAL,CAAcE,OAAd,CAAuBoD,IAAD,IAAU;AAC9B,UAAI,CAACnD,QAAD,EAAWC,OAAX,IAAsBkD,IAA1B;;AACA,cAAQnD,QAAR;AACE,aAAKjC,IAAI,CAACC,SAAV;AACEmD,UAAAA,YAAY,CAACf,IAAb,CAAkBH,OAAlB;AACA;;AACF,aAAKlC,IAAI,CAACK,YAAV;AACE8C,UAAAA,eAAe,CAACd,IAAhB,CAAqBH,OAArB;AACA;;AACF;AACE,aAAGF,OAAH,CAAWqD,IAAX,CAAgB,KAAK1D,SAAL,CAAe2D,gBAAf,CAAgCrD,QAAhC,CAAhB,EAA4DsD,IAAD,IAAU;AACnE;AACAA,YAAAA,IAAI,CAACzF,OAAD,CAAJ,GAAgByF,IAAI,CAACzF,OAAD,CAAJ,IAAiB,EAAjC;AACAyF,YAAAA,IAAI,CAACzF,OAAD,CAAJ,CAAcuC,IAAd,CAAmBH,OAAnB;AACD,WAJD;AAKA;AAbJ;AAeD,KAjBD;AAkBA,WAAO,CAACiB,eAAD,EAAkBC,YAAlB,CAAP;AACD;;AAzF4B;;AA2F/BhC,SAAS,CAACoE,QAAV,GAAqB;AACnB1D,EAAAA,QAAQ,EAAE,EADS;AAEnBK,EAAAA,WAAW,EAAE;AAFM,CAArB;;AAMA,SAASsD,WAAT,CAAqBnC,KAArB,EAA4BoC,MAA5B,EAAoCC,KAApC,EAA2C;AACzC,MAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAOE,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoB3E,MAApB,CAA2B,UAASuC,KAAT,EAAgBwC,GAAhB,EAAqB;AACrD,aAAOL,WAAW,CAACnC,KAAD,EAAQwC,GAAR,EAAaJ,MAAM,CAACI,GAAD,CAAnB,CAAlB;AACD,KAFM,EAEJxC,KAFI,CAAP;AAGD,GAJD,MAIO;AACL,WAAOA,KAAK,CAACvC,MAAN,CAAa,UAASuC,KAAT,EAAgByC,EAAhB,EAAoB;AACtC,UAAIA,EAAE,CAACpC,UAAH,IAAiBoC,EAAE,CAACpC,UAAH,CAAc+B,MAAd,CAArB,EAA4C;AAC1C,eAAOpC,KAAK,CAACjB,IAAN,CAAW0D,EAAX,CAAP;AACD,OAFD,MAEO;AACL,eAAOzC,KAAK,CAACJ,MAAN,CAAa6C,EAAE,CAAC7C,MAAhB,EAAwBpE,MAAM,CAAC,EAAD,EAAK;AAAC,WAAC4G,MAAD,GAAUC;AAAX,SAAL,EAAwBI,EAAE,CAACpC,UAA3B,CAA9B,CAAP;AACD;AACF,KANM,EAMJ,IAAI5E,KAAJ,EANI,CAAP;AAOD;AACF;;AAED,SAASiH,YAAT,CAAsBT,IAAtB,EAA4B;AAC1B,MAAIA,IAAI,CAACU,QAAL,KAAkBjG,IAAI,CAACK,YAA3B,EAAyC,OAAO,EAAP;AACzC,QAAMP,OAAO,GAAG,qBAAhB;AACA,SAAOyF,IAAI,CAACzF,OAAD,CAAJ,KAAkByF,IAAI,CAACzF,OAAD,CAAJ,GAAgBoG,MAAM,CAACC,gBAAP,CAAwBZ,IAAxB,CAAlC,CAAP;AACD;;AAED,SAAS/B,aAAT,CAAuBF,KAAvB,EAA8BN,IAA9B,EAAoC;AAClC,MAAIoD,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG/C,KAAK,CAACG,GAAN,CAAUC,MAAV,GAAmB,CAAhC,EAAmC2C,CAAC,IAAI,CAAL,IAAUD,OAAO,CAAC1C,MAAR,GAAiBV,IAAI,CAACU,MAAnE,EAA2E,EAAE2C,CAA7E,EAAgF;AAC9E,QAAIN,EAAE,GAAIzC,KAAK,CAACG,GAAN,CAAU4C,CAAV,CAAV;AACA,QAAI,OAAON,EAAE,CAAC7C,MAAV,KAAqB,QAAzB,EAAmC;AACnCkD,IAAAA,OAAO,GAAGL,EAAE,CAAC7C,MAAH,GAAYkD,OAAtB;AACD;;AACD,SAAOA,OAAO,CAACE,KAAR,CAAc,CAAC,CAAD,GAAGtD,IAAI,CAACU,MAAtB,MAAkCV,IAAzC;AACD;;AAED,SAASuD,MAAT,CAAgBhB,IAAhB,EAAsB;AACpB,MAAIA,IAAI,CAACiB,UAAL,CAAgB9C,MAAhB,KAA2B,CAA/B,EAAkC,OAAO,KAAP,CADd,CAC8B;;AAClD,MAAI+C,KAAK,GAAGT,YAAY,CAACT,IAAD,CAAxB;AACA,SAAO,CAAC,OAAD,EAAU,WAAV,EAAuBmB,OAAvB,CAA+BD,KAAK,CAACE,OAArC,IAAgD,CAAC,CAAxD;AACD;;AAED,SAASpD,QAAT,CAAkBgC,IAAlB,EAAwBpC,eAAxB,EAAyCC,YAAzC,EAAuD;AAAG;AACxD,MAAImC,IAAI,CAACU,QAAL,KAAkBV,IAAI,CAACtF,SAA3B,EAAsC;AACpC,WAAOmD,YAAY,CAACrC,MAAb,CAAoB,UAASuC,KAAT,EAAgBpB,OAAhB,EAAyB;AAClD,aAAOA,OAAO,CAACqD,IAAD,EAAOjC,KAAP,CAAd;AACD,KAFM,EAEJ,IAAIvE,KAAJ,EAFI,CAAP;AAGD,GAJD,MAIO,IAAIwG,IAAI,CAACU,QAAL,KAAkBV,IAAI,CAAClF,YAA3B,EAAyC;AAC9C,WAAO,GAAGU,MAAH,CAAUsE,IAAV,CAAeE,IAAI,CAACiB,UAAL,IAAmB,EAAlC,EAAsC,CAAClD,KAAD,EAAQsD,SAAR,KAAsB;AACjE,UAAIC,aAAa,GAAGtD,QAAQ,CAACqD,SAAD,EAAYzD,eAAZ,EAA6BC,YAA7B,CAA5B;;AACA,UAAIwD,SAAS,CAACX,QAAV,KAAuBV,IAAI,CAAClF,YAAhC,EAA8C;AAC5CwG,QAAAA,aAAa,GAAG1D,eAAe,CAACpC,MAAhB,CAAuB,UAAS8F,aAAT,EAAwB3E,OAAxB,EAAiC;AACtE,iBAAOA,OAAO,CAAC0E,SAAD,EAAYC,aAAZ,CAAd;AACD,SAFe,EAEbA,aAFa,CAAhB;AAGAA,QAAAA,aAAa,GAAG,CAACD,SAAS,CAAC9G,OAAD,CAAT,IAAsB,EAAvB,EAA2BiB,MAA3B,CAAkC,UAAS8F,aAAT,EAAwB3E,OAAxB,EAAiC;AACjF,iBAAOA,OAAO,CAAC0E,SAAD,EAAYC,aAAZ,CAAd;AACD,SAFe,EAEbA,aAFa,CAAhB;AAGD;;AACD,aAAOvD,KAAK,CAACvB,MAAN,CAAa8E,aAAb,CAAP;AACD,KAXM,EAWJ,IAAI9H,KAAJ,EAXI,CAAP;AAYD,GAbM,MAaA;AACL,WAAO,IAAIA,KAAJ,EAAP;AACD;AACF;;AAGD,SAAS4B,UAAT,CAAoB+E,MAApB,EAA4BH,IAA5B,EAAkCjC,KAAlC,EAAyC;AACvC,SAAOmC,WAAW,CAACnC,KAAD,EAAQoC,MAAR,EAAgB,IAAhB,CAAlB;AACD;;AAED,SAASlF,eAAT,CAAyB+E,IAAzB,EAA+BjC,KAA/B,EAAsC;AACpC,MAAIK,UAAU,GAAG3E,SAAS,CAAC8H,UAAV,CAAqBC,SAArB,CAA+BlB,IAA/B,CAAoCN,IAApC,CAAjB;AACA,MAAIyB,OAAO,GAAGhI,SAAS,CAAC8H,UAAV,CAAqBG,KAArB,CAA2BpB,IAA3B,CAAgCN,IAAhC,CAAd;AACA,MAAI2B,MAAM,GAAGlI,SAAS,CAAC8H,UAAV,CAAqBK,KAArB,CAA2BtB,IAA3B,CAAgCN,IAAhC,CAAb;AACA,MAAI7C,OAAO,GAAG,EAAd;AACAiB,EAAAA,UAAU,CAAC5B,MAAX,CAAkBiF,OAAlB,EAA2BjF,MAA3B,CAAkCmF,MAAlC,EAA0ClF,OAA1C,CAAmDoF,IAAD,IAAU;AAC1D,QAAInG,IAAI,GAAGjC,SAAS,CAACqI,KAAV,CAAgBD,IAAhB,EAAsBpI,SAAS,CAACsI,KAAV,CAAgBC,SAAtC,CAAX;;AACA,QAAItG,IAAI,IAAI,IAAZ,EAAkB;AAChByB,MAAAA,OAAO,CAACzB,IAAI,CAACuG,QAAN,CAAP,GAAyBvG,IAAI,CAAC0E,KAAL,CAAWJ,IAAX,CAAzB;AACA,UAAI7C,OAAO,CAACzB,IAAI,CAACuG,QAAN,CAAX,EAA4B;AAC7B;;AACDvG,IAAAA,IAAI,GAAGH,qBAAqB,CAACsG,IAAD,CAA5B;;AACA,QAAInG,IAAI,IAAI,IAAR,KAAiBA,IAAI,CAACuG,QAAL,KAAkBJ,IAAlB,IAA0BnG,IAAI,CAACC,OAAL,KAAiBkG,IAA5D,CAAJ,EAAuE;AACrE1E,MAAAA,OAAO,CAACzB,IAAI,CAACuG,QAAN,CAAP,GAAyBvG,IAAI,CAAC0E,KAAL,CAAWJ,IAAX,KAAoBkC,SAA7C;AACD;;AACDxG,IAAAA,IAAI,GAAGE,iBAAiB,CAACiG,IAAD,CAAxB;;AACA,QAAInG,IAAI,IAAI,IAAR,KAAiBA,IAAI,CAACuG,QAAL,KAAkBJ,IAAlB,IAA0BnG,IAAI,CAACC,OAAL,KAAiBkG,IAA5D,CAAJ,EAAuE;AACrEnG,MAAAA,IAAI,GAAGE,iBAAiB,CAACiG,IAAD,CAAxB;AACA1E,MAAAA,OAAO,CAACzB,IAAI,CAACuG,QAAN,CAAP,GAAyBvG,IAAI,CAAC0E,KAAL,CAAWJ,IAAX,KAAoBkC,SAA7C;AACD;AACF,GAfD;;AAgBA,MAAI7B,MAAM,CAACC,IAAP,CAAYnD,OAAZ,EAAqBgB,MAArB,GAA8B,CAAlC,EAAqC;AACnCJ,IAAAA,KAAK,GAAGmC,WAAW,CAACnC,KAAD,EAAQZ,OAAR,CAAnB;AACD;;AACD,SAAOY,KAAP;AACD;;AAED,SAAShD,SAAT,CAAmBiF,IAAnB,EAAyBjC,KAAzB,EAAgC;AAC9B,MAAIoE,KAAK,GAAG1I,SAAS,CAACqI,KAAV,CAAgB9B,IAAhB,CAAZ;AACA,MAAImC,KAAK,IAAI,IAAb,EAAmB,OAAOpE,KAAP;;AACnB,MAAIoE,KAAK,CAACC,SAAN,YAA2B3I,SAAS,CAAC4I,KAAzC,EAAgD;AAC9C,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIlC,KAAK,GAAG+B,KAAK,CAAC/B,KAAN,CAAYJ,IAAZ,CAAZ;;AACA,QAAII,KAAK,IAAI,IAAb,EAAmB;AACjBkC,MAAAA,KAAK,CAACH,KAAK,CAAC3E,QAAP,CAAL,GAAwB4C,KAAxB;AACArC,MAAAA,KAAK,GAAG,IAAIvE,KAAJ,GAAYmE,MAAZ,CAAmB2E,KAAnB,EAA0BH,KAAK,CAAChF,OAAN,CAAc6C,IAAd,CAA1B,CAAR;AACD;AACF,GAPD,MAOO,IAAI,OAAOmC,KAAK,CAAChF,OAAb,KAAyB,UAA7B,EAAyC;AAC9CY,IAAAA,KAAK,GAAGmC,WAAW,CAACnC,KAAD,EAAQoE,KAAK,CAAC3E,QAAd,EAAwB2E,KAAK,CAAChF,OAAN,CAAc6C,IAAd,CAAxB,CAAnB;AACD;;AACD,SAAOjC,KAAP;AACD;;AAED,SAASlD,UAAT,CAAoBmF,IAApB,EAA0BjC,KAA1B,EAAiC;AAC/B,MAAI,CAACE,aAAa,CAACF,KAAD,EAAQ,IAAR,CAAlB,EAAiC;AAC/BA,IAAAA,KAAK,CAACJ,MAAN,CAAa,IAAb;AACD;;AACD,SAAOI,KAAP;AACD;;AAED,SAASzC,WAAT,GAAuB;AACrB,SAAO,IAAI9B,KAAJ,EAAP;AACD;;AAED,SAAS2B,WAAT,CAAqB6E,IAArB,EAA2BjC,KAA3B,EAAkC;AAChC,MAAIoE,KAAK,GAAG1I,SAAS,CAACqI,KAAV,CAAgB9B,IAAhB,CAAZ;;AACA,MAAImC,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAAC3E,QAAN,KAAmB,WAApC,IAAmD,CAACS,aAAa,CAACF,KAAD,EAAQ,IAAR,CAArE,EAAoF;AAClF,WAAOA,KAAP;AACD;;AACD,MAAIwE,MAAM,GAAG,CAAC,CAAd;AAAA,MAAiBC,MAAM,GAAGxC,IAAI,CAACyC,UAA/B;;AACA,SAAO,CAACD,MAAM,CAACE,SAAP,CAAiBC,QAAjB,CAA0B,cAA1B,CAAR,EAAmD;AACjD,QAAI,CAAClJ,SAAS,CAACqI,KAAV,CAAgBU,MAAhB,KAA2B,EAA5B,EAAgChF,QAAhC,KAA6C,MAAjD,EAAyD;AACvD+E,MAAAA,MAAM,IAAI,CAAV;AACD;;AACDC,IAAAA,MAAM,GAAGA,MAAM,CAACC,UAAhB;AACD;;AACD,MAAIF,MAAM,IAAI,CAAd,EAAiB,OAAOxE,KAAP;AACjB,SAAOA,KAAK,CAACM,OAAN,CAAc,IAAI7E,KAAJ,GAAY8E,MAAZ,CAAmBP,KAAK,CAACI,MAAN,KAAiB,CAApC,EAAuCG,MAAvC,CAA8C,CAA9C,EAAiD;AAAEiE,IAAAA,MAAM,EAAEA;AAAV,GAAjD,CAAd,CAAP;AACD;;AAED,SAAS3H,YAAT,CAAsBoF,IAAtB,EAA4BjC,KAA5B,EAAmC;AACjC,MAAI,CAACE,aAAa,CAACF,KAAD,EAAQ,IAAR,CAAlB,EAAiC;AAC/B,QAAIiD,MAAM,CAAChB,IAAD,CAAN,IAAiBjC,KAAK,CAACI,MAAN,KAAiB,CAAjB,IAAsB6B,IAAI,CAAC4C,WAA3B,IAA0C5B,MAAM,CAAChB,IAAI,CAAC4C,WAAN,CAArE,EAA0F;AACxF7E,MAAAA,KAAK,CAACJ,MAAN,CAAa,IAAb;AACD;AACF;;AACD,SAAOI,KAAP;AACD;;AAED,SAAS/C,YAAT,CAAsBgF,IAAtB,EAA4BjC,KAA5B,EAAmC;AACjC,MAAIiD,MAAM,CAAChB,IAAD,CAAN,IAAgBA,IAAI,CAAC6C,kBAAL,IAA2B,IAA3C,IAAmD,CAAC5E,aAAa,CAACF,KAAD,EAAQ,MAAR,CAArE,EAAsF;AACpF,QAAI+E,UAAU,GAAG9C,IAAI,CAAC+C,YAAL,GAAoBC,UAAU,CAACvC,YAAY,CAACT,IAAD,CAAZ,CAAmBiD,SAApB,CAA9B,GAA+DD,UAAU,CAACvC,YAAY,CAACT,IAAD,CAAZ,CAAmBkD,YAApB,CAA1F;;AACA,QAAIlD,IAAI,CAAC6C,kBAAL,CAAwBM,SAAxB,GAAoCnD,IAAI,CAACmD,SAAL,GAAiBL,UAAU,GAAC,GAApE,EAAyE;AACvE/E,MAAAA,KAAK,CAACJ,MAAN,CAAa,IAAb;AACD;AACF;;AACD,SAAOI,KAAP;AACD;;AAED,SAAS7C,WAAT,CAAqB8E,IAArB,EAA2BjC,KAA3B,EAAkC;AAChC,MAAIZ,OAAO,GAAG,EAAd;AACA,MAAI+D,KAAK,GAAGlB,IAAI,CAACkB,KAAL,IAAc,EAA1B;;AACA,MAAIA,KAAK,CAACkC,SAAN,IAAmB3C,YAAY,CAACT,IAAD,CAAZ,CAAmBoD,SAAnB,KAAiC,QAAxD,EAAkE;AAChEjG,IAAAA,OAAO,CAACkG,MAAR,GAAiB,IAAjB;AACD;;AACD,MAAInC,KAAK,CAACoC,UAAN,KAAqB7C,YAAY,CAACT,IAAD,CAAZ,CAAmBsD,UAAnB,CAA8BC,UAA9B,CAAyC,MAAzC,KACAC,QAAQ,CAAC/C,YAAY,CAACT,IAAD,CAAZ,CAAmBsD,UAApB,CAAR,IAA2C,GADhE,CAAJ,EAC0E;AACxEnG,IAAAA,OAAO,CAACsG,IAAR,GAAe,IAAf;AACD;;AACD,MAAIpD,MAAM,CAACC,IAAP,CAAYnD,OAAZ,EAAqBgB,MAArB,GAA8B,CAAlC,EAAqC;AACnCJ,IAAAA,KAAK,GAAGmC,WAAW,CAACnC,KAAD,EAAQZ,OAAR,CAAnB;AACD;;AACD,MAAI6F,UAAU,CAAC9B,KAAK,CAACwC,UAAN,IAAoB,CAArB,CAAV,GAAoC,CAAxC,EAA2C;AAAG;AAC5C3F,IAAAA,KAAK,GAAG,IAAIvE,KAAJ,GAAYmE,MAAZ,CAAmB,IAAnB,EAAyBnB,MAAzB,CAAgCuB,KAAhC,CAAR;AACD;;AACD,SAAOA,KAAP;AACD;;AAED,SAASpD,SAAT,CAAmBqF,IAAnB,EAAyBjC,KAAzB,EAAgC;AAC9B,MAAIN,IAAI,GAAGuC,IAAI,CAAC2D,IAAhB,CAD8B,CAE9B;;AACA,MAAI3D,IAAI,CAACyC,UAAL,CAAgBmB,OAAhB,KAA4B,KAAhC,EAAuC;AACrC,WAAO7F,KAAK,CAACJ,MAAN,CAAaF,IAAI,CAACoG,IAAL,EAAb,CAAP;AACD;;AACD,MAAIpG,IAAI,CAACoG,IAAL,GAAY1F,MAAZ,KAAuB,CAAvB,IAA4B6B,IAAI,CAACyC,UAAL,CAAgBC,SAAhB,CAA0BC,QAA1B,CAAmC,cAAnC,CAAhC,EAAoF;AAClF,WAAO5E,KAAP;AACD;;AACD,MAAI,CAAC0C,YAAY,CAACT,IAAI,CAACyC,UAAN,CAAZ,CAA8BqB,UAA9B,CAAyCP,UAAzC,CAAoD,KAApD,CAAL,EAAiE;AAC/D;AACA,QAAIQ,QAAQ,GAAG,UAASC,QAAT,EAAmB7B,KAAnB,EAA0B;AACvCA,MAAAA,KAAK,GAAGA,KAAK,CAACjF,OAAN,CAAc,YAAd,EAA4B,EAA5B,CAAR,CADuC,CACK;;AAC5C,aAAOiF,KAAK,CAAChE,MAAN,GAAe,CAAf,IAAoB6F,QAApB,GAA+B,GAA/B,GAAqC7B,KAA5C;AACD,KAHD;;AAIA1E,IAAAA,IAAI,GAAGA,IAAI,CAACP,OAAL,CAAa,OAAb,EAAsB,GAAtB,EAA2BA,OAA3B,CAAmC,KAAnC,EAA0C,GAA1C,CAAP;AACAO,IAAAA,IAAI,GAAGA,IAAI,CAACP,OAAL,CAAa,QAAb,EAAuB6G,QAAQ,CAAC1I,IAAT,CAAc0I,QAAd,EAAwB,IAAxB,CAAvB,CAAP,CAP+D,CAOA;;AAC/D,QAAK/D,IAAI,CAACiE,eAAL,IAAwB,IAAxB,IAAgCjD,MAAM,CAAChB,IAAI,CAACyC,UAAN,CAAvC,IACCzC,IAAI,CAACiE,eAAL,IAAwB,IAAxB,IAAgCjD,MAAM,CAAChB,IAAI,CAACiE,eAAN,CAD3C,EACoE;AAClExG,MAAAA,IAAI,GAAGA,IAAI,CAACP,OAAL,CAAa,MAAb,EAAqB6G,QAAQ,CAAC1I,IAAT,CAAc0I,QAAd,EAAwB,KAAxB,CAArB,CAAP;AACD;;AACD,QAAK/D,IAAI,CAAC4C,WAAL,IAAoB,IAApB,IAA4B5B,MAAM,CAAChB,IAAI,CAACyC,UAAN,CAAnC,IACCzC,IAAI,CAAC4C,WAAL,IAAoB,IAApB,IAA4B5B,MAAM,CAAChB,IAAI,CAAC4C,WAAN,CADvC,EAC4D;AAC1DnF,MAAAA,IAAI,GAAGA,IAAI,CAACP,OAAL,CAAa,MAAb,EAAqB6G,QAAQ,CAAC1I,IAAT,CAAc0I,QAAd,EAAwB,KAAxB,CAArB,CAAP;AACD;AACF;;AACD,SAAOhG,KAAK,CAACJ,MAAN,CAAaF,IAAb,CAAP;AACD;;AAGD,SAAS5B,SAAS,IAAIqI,OAAtB,EAA+BjJ,eAA/B,EAAgDF,SAAhD,EAA2DH,YAA3D,EAAyEI,YAAzE,EAAuFL,SAAvF","sourcesContent":["import extend from 'extend';\nimport Delta from 'quill-delta';\nimport Parchment from 'parchment';\nimport Quill from '../core/quill';\nimport logger from '../core/logger';\nimport Module from '../core/module';\n\nimport { AlignAttribute, AlignStyle } from '../formats/align';\nimport { BackgroundStyle } from '../formats/background';\nimport CodeBlock from '../formats/code';\nimport { ColorStyle } from '../formats/color';\nimport { DirectionAttribute, DirectionStyle } from '../formats/direction';\nimport { FontStyle } from '../formats/font';\nimport { SizeStyle } from '../formats/size';\n\nlet debug = logger('quill:clipboard');\n\n\nconst DOM_KEY = '__ql-matcher';\n\nconst CLIPBOARD_CONFIG = [\n  [Node.TEXT_NODE, matchText],\n  [Node.TEXT_NODE, matchNewline],\n  ['br', matchBreak],\n  [Node.ELEMENT_NODE, matchNewline],\n  [Node.ELEMENT_NODE, matchBlot],\n  [Node.ELEMENT_NODE, matchSpacing],\n  [Node.ELEMENT_NODE, matchAttributor],\n  [Node.ELEMENT_NODE, matchStyles],\n  ['li', matchIndent],\n  ['b', matchAlias.bind(matchAlias, 'bold')],\n  ['i', matchAlias.bind(matchAlias, 'italic')],\n  ['style', matchIgnore]\n];\n\nconst ATTRIBUTE_ATTRIBUTORS = [\n  AlignAttribute,\n  DirectionAttribute\n].reduce(function(memo, attr) {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\n\nconst STYLE_ATTRIBUTORS = [\n  AlignStyle,\n  BackgroundStyle,\n  ColorStyle,\n  DirectionStyle,\n  FontStyle,\n  SizeStyle\n].reduce(function(memo, attr) {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\n\n\nclass Clipboard extends Module {\n  constructor(quill, options) {\n    super(quill, options);\n    this.quill.root.addEventListener('paste', this.onPaste.bind(this));\n    this.container = this.quill.addContainer('ql-clipboard');\n    this.container.setAttribute('contenteditable', true);\n    this.container.setAttribute('tabindex', -1);\n    this.matchers = [];\n    CLIPBOARD_CONFIG.concat(this.options.matchers).forEach(([selector, matcher]) => {\n      if (!options.matchVisual && matcher === matchSpacing) return;\n      this.addMatcher(selector, matcher);\n    });\n  }\n\n  addMatcher(selector, matcher) {\n    this.matchers.push([selector, matcher]);\n  }\n\n  convert(html) {\n    if (typeof html === 'string') {\n      this.container.innerHTML = html.replace(/\\>\\r?\\n +\\</g, '><'); // Remove spaces between tags\n      return this.convert();\n    }\n    const formats = this.quill.getFormat(this.quill.selection.savedRange.index);\n    if (formats[CodeBlock.blotName]) {\n      const text = this.container.innerText;\n      this.container.innerHTML = '';\n      return new Delta().insert(text, { [CodeBlock.blotName]: formats[CodeBlock.blotName] });\n    }\n    let [elementMatchers, textMatchers] = this.prepareMatching();\n    let delta = traverse(this.container, elementMatchers, textMatchers);\n    // Remove trailing newline\n    if (deltaEndsWith(delta, '\\n') && delta.ops[delta.ops.length - 1].attributes == null) {\n      delta = delta.compose(new Delta().retain(delta.length() - 1).delete(1));\n    }\n    debug.log('convert', this.container.innerHTML, delta);\n    this.container.innerHTML = '';\n    return delta;\n  }\n\n  dangerouslyPasteHTML(index, html, source = Quill.sources.API) {\n    if (typeof index === 'string') {\n      this.quill.setContents(this.convert(index), html);\n      this.quill.setSelection(0, Quill.sources.SILENT);\n    } else {\n      let paste = this.convert(html);\n      this.quill.updateContents(new Delta().retain(index).concat(paste), source);\n      this.quill.setSelection(index + paste.length(), Quill.sources.SILENT);\n    }\n  }\n\n  onPaste(e) {\n    if (e.defaultPrevented || !this.quill.isEnabled()) return;\n    let range = this.quill.getSelection();\n    let delta = new Delta().retain(range.index);\n    let scrollTop = this.quill.scrollingContainer.scrollTop;\n    this.container.focus();\n    this.quill.selection.update(Quill.sources.SILENT);\n    setTimeout(() => {\n      delta = delta.concat(this.convert()).delete(range.length);\n      this.quill.updateContents(delta, Quill.sources.USER);\n      // range.length contributes to delta.length()\n      this.quill.setSelection(delta.length() - range.length, Quill.sources.SILENT);\n      this.quill.scrollingContainer.scrollTop = scrollTop;\n      this.quill.focus();\n    }, 1);\n  }\n\n  prepareMatching() {\n    let elementMatchers = [], textMatchers = [];\n    this.matchers.forEach((pair) => {\n      let [selector, matcher] = pair;\n      switch (selector) {\n        case Node.TEXT_NODE:\n          textMatchers.push(matcher);\n          break;\n        case Node.ELEMENT_NODE:\n          elementMatchers.push(matcher);\n          break;\n        default:\n          [].forEach.call(this.container.querySelectorAll(selector), (node) => {\n            // TODO use weakmap\n            node[DOM_KEY] = node[DOM_KEY] || [];\n            node[DOM_KEY].push(matcher);\n          });\n          break;\n      }\n    });\n    return [elementMatchers, textMatchers];\n  }\n}\nClipboard.DEFAULTS = {\n  matchers: [],\n  matchVisual: true\n};\n\n\nfunction applyFormat(delta, format, value) {\n  if (typeof format === 'object') {\n    return Object.keys(format).reduce(function(delta, key) {\n      return applyFormat(delta, key, format[key]);\n    }, delta);\n  } else {\n    return delta.reduce(function(delta, op) {\n      if (op.attributes && op.attributes[format]) {\n        return delta.push(op);\n      } else {\n        return delta.insert(op.insert, extend({}, {[format]: value}, op.attributes));\n      }\n    }, new Delta());\n  }\n}\n\nfunction computeStyle(node) {\n  if (node.nodeType !== Node.ELEMENT_NODE) return {};\n  const DOM_KEY = '__ql-computed-style';\n  return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));\n}\n\nfunction deltaEndsWith(delta, text) {\n  let endText = \"\";\n  for (let i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {\n    let op  = delta.ops[i];\n    if (typeof op.insert !== 'string') break;\n    endText = op.insert + endText;\n  }\n  return endText.slice(-1*text.length) === text;\n}\n\nfunction isLine(node) {\n  if (node.childNodes.length === 0) return false;   // Exclude embed blocks\n  let style = computeStyle(node);\n  return ['block', 'list-item'].indexOf(style.display) > -1;\n}\n\nfunction traverse(node, elementMatchers, textMatchers) {  // Post-order\n  if (node.nodeType === node.TEXT_NODE) {\n    return textMatchers.reduce(function(delta, matcher) {\n      return matcher(node, delta);\n    }, new Delta());\n  } else if (node.nodeType === node.ELEMENT_NODE) {\n    return [].reduce.call(node.childNodes || [], (delta, childNode) => {\n      let childrenDelta = traverse(childNode, elementMatchers, textMatchers);\n      if (childNode.nodeType === node.ELEMENT_NODE) {\n        childrenDelta = elementMatchers.reduce(function(childrenDelta, matcher) {\n          return matcher(childNode, childrenDelta);\n        }, childrenDelta);\n        childrenDelta = (childNode[DOM_KEY] || []).reduce(function(childrenDelta, matcher) {\n          return matcher(childNode, childrenDelta);\n        }, childrenDelta);\n      }\n      return delta.concat(childrenDelta);\n    }, new Delta());\n  } else {\n    return new Delta();\n  }\n}\n\n\nfunction matchAlias(format, node, delta) {\n  return applyFormat(delta, format, true);\n}\n\nfunction matchAttributor(node, delta) {\n  let attributes = Parchment.Attributor.Attribute.keys(node);\n  let classes = Parchment.Attributor.Class.keys(node);\n  let styles = Parchment.Attributor.Style.keys(node);\n  let formats = {};\n  attributes.concat(classes).concat(styles).forEach((name) => {\n    let attr = Parchment.query(name, Parchment.Scope.ATTRIBUTE);\n    if (attr != null) {\n      formats[attr.attrName] = attr.value(node);\n      if (formats[attr.attrName]) return;\n    }\n    attr = ATTRIBUTE_ATTRIBUTORS[name];\n    if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n      formats[attr.attrName] = attr.value(node) || undefined;\n    }\n    attr = STYLE_ATTRIBUTORS[name]\n    if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n      attr = STYLE_ATTRIBUTORS[name];\n      formats[attr.attrName] = attr.value(node) || undefined;\n    }\n  });\n  if (Object.keys(formats).length > 0) {\n    delta = applyFormat(delta, formats);\n  }\n  return delta;\n}\n\nfunction matchBlot(node, delta) {\n  let match = Parchment.query(node);\n  if (match == null) return delta;\n  if (match.prototype instanceof Parchment.Embed) {\n    let embed = {};\n    let value = match.value(node);\n    if (value != null) {\n      embed[match.blotName] = value;\n      delta = new Delta().insert(embed, match.formats(node));\n    }\n  } else if (typeof match.formats === 'function') {\n    delta = applyFormat(delta, match.blotName, match.formats(node));\n  }\n  return delta;\n}\n\nfunction matchBreak(node, delta) {\n  if (!deltaEndsWith(delta, '\\n')) {\n    delta.insert('\\n');\n  }\n  return delta;\n}\n\nfunction matchIgnore() {\n  return new Delta();\n}\n\nfunction matchIndent(node, delta) {\n  let match = Parchment.query(node);\n  if (match == null || match.blotName !== 'list-item' || !deltaEndsWith(delta, '\\n')) {\n    return delta;\n  }\n  let indent = -1, parent = node.parentNode;\n  while (!parent.classList.contains('ql-clipboard')) {\n    if ((Parchment.query(parent) || {}).blotName === 'list') {\n      indent += 1;\n    }\n    parent = parent.parentNode;\n  }\n  if (indent <= 0) return delta;\n  return delta.compose(new Delta().retain(delta.length() - 1).retain(1, { indent: indent}));\n}\n\nfunction matchNewline(node, delta) {\n  if (!deltaEndsWith(delta, '\\n')) {\n    if (isLine(node) || (delta.length() > 0 && node.nextSibling && isLine(node.nextSibling))) {\n      delta.insert('\\n');\n    }\n  }\n  return delta;\n}\n\nfunction matchSpacing(node, delta) {\n  if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\\n\\n')) {\n    let nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);\n    if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight*1.5) {\n      delta.insert('\\n');\n    }\n  }\n  return delta;\n}\n\nfunction matchStyles(node, delta) {\n  let formats = {};\n  let style = node.style || {};\n  if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {\n    formats.italic = true;\n  }\n  if (style.fontWeight && (computeStyle(node).fontWeight.startsWith('bold') ||\n                           parseInt(computeStyle(node).fontWeight) >= 700)) {\n    formats.bold = true;\n  }\n  if (Object.keys(formats).length > 0) {\n    delta = applyFormat(delta, formats);\n  }\n  if (parseFloat(style.textIndent || 0) > 0) {  // Could be 0.5in\n    delta = new Delta().insert('\\t').concat(delta);\n  }\n  return delta;\n}\n\nfunction matchText(node, delta) {\n  let text = node.data;\n  // Word represents empty line with <o:p>&nbsp;</o:p>\n  if (node.parentNode.tagName === 'O:P') {\n    return delta.insert(text.trim());\n  }\n  if (text.trim().length === 0 && node.parentNode.classList.contains('ql-clipboard')) {\n    return delta;\n  }\n  if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {\n    // eslint-disable-next-line func-style\n    let replacer = function(collapse, match) {\n      match = match.replace(/[^\\u00a0]/g, '');    // \\u00a0 is nbsp;\n      return match.length < 1 && collapse ? ' ' : match;\n    };\n    text = text.replace(/\\r\\n/g, ' ').replace(/\\n/g, ' ');\n    text = text.replace(/\\s\\s+/g, replacer.bind(replacer, true));  // collapse whitespace\n    if ((node.previousSibling == null && isLine(node.parentNode)) ||\n        (node.previousSibling != null && isLine(node.previousSibling))) {\n      text = text.replace(/^\\s+/, replacer.bind(replacer, false));\n    }\n    if ((node.nextSibling == null && isLine(node.parentNode)) ||\n        (node.nextSibling != null && isLine(node.nextSibling))) {\n      text = text.replace(/\\s+$/, replacer.bind(replacer, false));\n    }\n  }\n  return delta.insert(text);\n}\n\n\nexport { Clipboard as default, matchAttributor, matchBlot, matchNewline, matchSpacing, matchText };\n"]},"metadata":{},"sourceType":"module"}