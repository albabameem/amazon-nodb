{"ast":null,"code":"define([], function () {\n  function MaximumInputLength(decorated, $e, options) {\n    this.maximumInputLength = options.get('maximumInputLength');\n    decorated.call(this, $e, options);\n  }\n\n  MaximumInputLength.prototype.query = function (decorated, params, callback) {\n    params.term = params.term || '';\n\n    if (this.maximumInputLength > 0 && params.term.length > this.maximumInputLength) {\n      this.trigger('results:message', {\n        message: 'inputTooLong',\n        args: {\n          maximum: this.maximumInputLength,\n          input: params.term,\n          params: params\n        }\n      });\n      return;\n    }\n\n    decorated.call(this, params, callback);\n  };\n\n  return MaximumInputLength;\n});","map":{"version":3,"sources":["/Users/albab/bookapro/amazon/src/assets/vendor/select2/src/js/select2/data/maximumInputLength.js"],"names":["define","MaximumInputLength","decorated","$e","options","maximumInputLength","get","call","prototype","query","params","callback","term","length","trigger","message","args","maximum","input"],"mappings":"AAAAA,MAAM,CAAC,EAAD,EAEH,YAAY;AACb,WAASC,kBAAT,CAA6BC,SAA7B,EAAwCC,EAAxC,EAA4CC,OAA5C,EAAqD;AACnD,SAAKC,kBAAL,GAA0BD,OAAO,CAACE,GAAR,CAAY,oBAAZ,CAA1B;AAEAJ,IAAAA,SAAS,CAACK,IAAV,CAAe,IAAf,EAAqBJ,EAArB,EAAyBC,OAAzB;AACD;;AAEDH,EAAAA,kBAAkB,CAACO,SAAnB,CAA6BC,KAA7B,GAAqC,UAAUP,SAAV,EAAqBQ,MAArB,EAA6BC,QAA7B,EAAuC;AAC1ED,IAAAA,MAAM,CAACE,IAAP,GAAcF,MAAM,CAACE,IAAP,IAAe,EAA7B;;AAEA,QAAI,KAAKP,kBAAL,GAA0B,CAA1B,IACAK,MAAM,CAACE,IAAP,CAAYC,MAAZ,GAAqB,KAAKR,kBAD9B,EACkD;AAChD,WAAKS,OAAL,CAAa,iBAAb,EAAgC;AAC9BC,QAAAA,OAAO,EAAE,cADqB;AAE9BC,QAAAA,IAAI,EAAE;AACJC,UAAAA,OAAO,EAAE,KAAKZ,kBADV;AAEJa,UAAAA,KAAK,EAAER,MAAM,CAACE,IAFV;AAGJF,UAAAA,MAAM,EAAEA;AAHJ;AAFwB,OAAhC;AASA;AACD;;AAEDR,IAAAA,SAAS,CAACK,IAAV,CAAe,IAAf,EAAqBG,MAArB,EAA6BC,QAA7B;AACD,GAlBD;;AAoBA,SAAOV,kBAAP;AACD,CA9BK,CAAN","sourcesContent":["define([\n\n], function () {\n  function MaximumInputLength (decorated, $e, options) {\n    this.maximumInputLength = options.get('maximumInputLength');\n\n    decorated.call(this, $e, options);\n  }\n\n  MaximumInputLength.prototype.query = function (decorated, params, callback) {\n    params.term = params.term || '';\n\n    if (this.maximumInputLength > 0 &&\n        params.term.length > this.maximumInputLength) {\n      this.trigger('results:message', {\n        message: 'inputTooLong',\n        args: {\n          maximum: this.maximumInputLength,\n          input: params.term,\n          params: params\n        }\n      });\n\n      return;\n    }\n\n    decorated.call(this, params, callback);\n  };\n\n  return MaximumInputLength;\n});\n"]},"metadata":{},"sourceType":"module"}