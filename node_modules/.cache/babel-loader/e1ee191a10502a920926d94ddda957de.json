{"ast":null,"code":"const Sequelize = require(\"sequelize\");\n\nconst sequelize = new Sequelize(\"dbnolgfvda2p5r\", \"kyktuyoxaubnwz\", \"f56320dac59c01906c73f165e30fcfe7697f1941af4685d8846fc3add4c4bd30\", {\n  host: \"ec2-54-211-176-156.compute-1.amazonaws.com\",\n  dialect: \"postgres\",\n  port: 5432,\n  dialectOptions: {\n    ssl: {\n      rejectUnauthorized: false\n    }\n  }\n}); // grant usage on schema public to public;\n// grant create on schema public to public;\n\nsequelize.authenticate().then(function () {\n  console.log(\"Connection has been established successfully.\");\n}).catch(function (err) {\n  console.log(\"Unable to connect to the database:\", err);\n});\nvar BlogCategory = sequelize.define(\"Blog_Category\", {\n  blogCategoryId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  name: Sequelize.STRING,\n  description: Sequelize.STRING\n});\nvar Blogs = sequelize.define(\"Blog\", {\n  blogId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  title: Sequelize.STRING,\n  content: Sequelize.STRING,\n  image: Sequelize.BLOB,\n  status: Sequelize.SMALLINT\n});\nvar User = sequelize.define(\"User\", {\n  userId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  fname: Sequelize.STRING,\n  lname: Sequelize.STRING,\n  email: Sequelize.STRING,\n  password: Sequelize.STRING,\n  status: Sequelize.STRING,\n  lname: Sequelize.STRING\n});\nvar Services = sequelize.define(\"Service\", {\n  serviceId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  name: Sequelize.STRING,\n  description: Sequelize.STRING,\n  image: Sequelize.BLOB,\n  location: Sequelize.STRING,\n  price: Sequelize.DOUBLE,\n  status: Sequelize.SMALLINT\n});\nvar Cart = sequelize.define(\"Cart\", {\n  cartId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  quantity: Sequelize.INTEGER,\n  total_price: Sequelize.DOUBLE\n});\nvar ServiceCategory = sequelize.define(\"Service_Category\", {\n  categoryId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  name: Sequelize.STRING,\n  description: Sequelize.STRING,\n  image: Sequelize.BLOB,\n  status: Sequelize.SMALLINT\n});\nvar UserAddress = sequelize.define(\"User_Address\", {\n  user_addressId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  address: Sequelize.STRING,\n  city: Sequelize.STRING,\n  state: Sequelize.STRING,\n  postal_code: Sequelize.STRING,\n  phone: Sequelize.STRING\n});\nvar Reservation = sequelize.define(\"Reservation\", {\n  reservationId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  booking_date: Sequelize.DATE,\n  status: Sequelize.SMALLINT\n});\nvar ReservationItem = sequelize.define(\"Reservation_Item\", {\n  reservation_itemId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  quantity: Sequelize.INTEGER,\n  total_price: Sequelize.DOUBLE\n});\nvar Page = sequelize.define(\"Page\", {\n  pagesId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true\n  },\n  title: Sequelize.STRING,\n  content: Sequelize.STRING,\n  image: Sequelize.BLOB,\n  status: Sequelize.SMALLINT\n});\nUser.hasMany(Page, {\n  foreignKey: \"userId\"\n});\nServiceCategory.hasMany(Services, {\n  foreignKey: \"categoryId\"\n});\nUser.hasMany(UserAddress, {\n  foreignKey: \"userId\"\n});\nUserAddress.hasMany(Reservation, {\n  foreignKey: \"user_addressId\"\n}); // User.hasMany(Cart, { foreignKey: \"userId\" });\n// Services.hasMany(Cart, { foreignKey: \"serviceId\" });\n// Cart.belongsTo(User);\n// Cart.belongsTo(Services);\n\nUser.belongsToMany(Services, {\n  through: Cart\n});\nServices.belongsToMany(User, {\n  through: Cart\n}); // Reservation.hasMany(ReservationItem, { foreignKey: \"reservationId\" });\n// Services.hasMany(ReservationItem, { foreignKey: \"serviceId\" });\n// Reservation_Item.belongsTo(Reservation);\n// Reservation_Item.belongsTo(Services);\n\nReservation.belongsToMany(Services, {\n  through: ReservationItem\n});\nServices.belongsToMany(Reservation, {\n  through: ReservationItem\n}); // User.hasMany(Blogs, { foreignKey: \"userId\" });\n// BlogCategory.hasMany(Blogs, { foreignKey: \"blogCategoryId\" });\n// Blogs.belongsTo(User);\n// Blogs.belongsTo(Blog_Categories);\n\nUser.belongsToMany(BlogCategory, {\n  through: Blogs\n});\nBlogCategory.belongsToMany(User, {\n  through: Blogs\n});\n\nmodule.exports.initialize = function () {\n  return new Promise(function (resolve, reject) {\n    sequelize.sync({\n      force: true\n    }).then(function () {\n      resolve(\"Success.\");\n    }).catch(function (err) {\n      console.log(err);\n      reject(\"Unable to sync the database.\");\n    });\n  });\n};","map":{"version":3,"sources":["/Users/albab/bookapro/amazon/src/Model/BookAProModel.js"],"names":["Sequelize","require","sequelize","host","dialect","port","dialectOptions","ssl","rejectUnauthorized","authenticate","then","console","log","catch","err","BlogCategory","define","blogCategoryId","type","INTEGER","primaryKey","autoIncrement","name","STRING","description","Blogs","blogId","title","content","image","BLOB","status","SMALLINT","User","userId","fname","lname","email","password","Services","serviceId","location","price","DOUBLE","Cart","cartId","quantity","total_price","ServiceCategory","categoryId","UserAddress","user_addressId","address","city","state","postal_code","phone","Reservation","reservationId","booking_date","DATE","ReservationItem","reservation_itemId","Page","pagesId","hasMany","foreignKey","belongsToMany","through","module","exports","initialize","Promise","resolve","reject","sync","force"],"mappings":"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","sourcesContent":["const Sequelize = require(\"sequelize\");\n\nconst sequelize = new Sequelize(\n  \"dbnolgfvda2p5r\",\n  \"kyktuyoxaubnwz\",\n  \"f56320dac59c01906c73f165e30fcfe7697f1941af4685d8846fc3add4c4bd30\",\n  {\n    host: \"ec2-54-211-176-156.compute-1.amazonaws.com\",\n    dialect: \"postgres\",\n    port: 5432,\n    dialectOptions: {\n      ssl: { rejectUnauthorized: false },\n    },\n  }\n);\n\n// grant usage on schema public to public;\n// grant create on schema public to public;\n\nsequelize\n  .authenticate()\n  .then(function () {\n    console.log(\"Connection has been established successfully.\");\n  })\n  .catch(function (err) {\n    console.log(\"Unable to connect to the database:\", err);\n  });\n\nvar BlogCategory = sequelize.define(\"Blog_Category\", {\n  blogCategoryId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  name: Sequelize.STRING,\n  description: Sequelize.STRING,\n});\n\nvar Blogs = sequelize.define(\"Blog\", {\n  blogId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  title: Sequelize.STRING,\n  content: Sequelize.STRING,\n  image: Sequelize.BLOB,\n  status: Sequelize.SMALLINT,\n});\n\nvar User = sequelize.define(\"User\", {\n  userId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  fname: Sequelize.STRING,\n  lname: Sequelize.STRING,\n  email: Sequelize.STRING,\n  password: Sequelize.STRING,\n  status: Sequelize.STRING,\n  lname: Sequelize.STRING,\n});\n\nvar Services = sequelize.define(\"Service\", {\n  serviceId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  name: Sequelize.STRING,\n  description: Sequelize.STRING,\n  image: Sequelize.BLOB,\n  location: Sequelize.STRING,\n  price: Sequelize.DOUBLE,\n  status: Sequelize.SMALLINT,\n});\n\nvar Cart = sequelize.define(\"Cart\", {\n  cartId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  quantity: Sequelize.INTEGER,\n  total_price: Sequelize.DOUBLE,\n});\n\nvar ServiceCategory = sequelize.define(\"Service_Category\", {\n  categoryId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  name: Sequelize.STRING,\n  description: Sequelize.STRING,\n  image: Sequelize.BLOB,\n  status: Sequelize.SMALLINT,\n});\n\nvar UserAddress = sequelize.define(\"User_Address\", {\n  user_addressId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  address: Sequelize.STRING,\n  city: Sequelize.STRING,\n  state: Sequelize.STRING,\n  postal_code: Sequelize.STRING,\n  phone: Sequelize.STRING,\n});\n\nvar Reservation = sequelize.define(\"Reservation\", {\n  reservationId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  booking_date: Sequelize.DATE,\n  status: Sequelize.SMALLINT,\n});\n\nvar ReservationItem = sequelize.define(\"Reservation_Item\", {\n  reservation_itemId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  quantity: Sequelize.INTEGER,\n  total_price: Sequelize.DOUBLE,\n});\n\nvar Page = sequelize.define(\"Page\", {\n  pagesId: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  title: Sequelize.STRING,\n  content: Sequelize.STRING,\n  image: Sequelize.BLOB,\n  status: Sequelize.SMALLINT,\n});\n\nUser.hasMany(Page, { foreignKey: \"userId\" });\n\nServiceCategory.hasMany(Services, { foreignKey: \"categoryId\" });\n\nUser.hasMany(UserAddress, { foreignKey: \"userId\" });\n\nUserAddress.hasMany(Reservation, { foreignKey: \"user_addressId\" });\n\n// User.hasMany(Cart, { foreignKey: \"userId\" });\n// Services.hasMany(Cart, { foreignKey: \"serviceId\" });\n// Cart.belongsTo(User);\n// Cart.belongsTo(Services);\nUser.belongsToMany(Services, { through: Cart });\nServices.belongsToMany(User, { through: Cart });\n\n// Reservation.hasMany(ReservationItem, { foreignKey: \"reservationId\" });\n// Services.hasMany(ReservationItem, { foreignKey: \"serviceId\" });\n// Reservation_Item.belongsTo(Reservation);\n// Reservation_Item.belongsTo(Services);\nReservation.belongsToMany(Services, { through: ReservationItem });\nServices.belongsToMany(Reservation, { through: ReservationItem });\n\n// User.hasMany(Blogs, { foreignKey: \"userId\" });\n// BlogCategory.hasMany(Blogs, { foreignKey: \"blogCategoryId\" });\n// Blogs.belongsTo(User);\n// Blogs.belongsTo(Blog_Categories);\nUser.belongsToMany(BlogCategory, { through: Blogs });\nBlogCategory.belongsToMany(User, { through: Blogs });\n\nmodule.exports.initialize = function () {\n  return new Promise(function (resolve, reject) {\n    sequelize\n      .sync({ force: true })\n      .then(function () {\n        resolve(\"Success.\");\n      })\n      .catch(function (err) {\n        console.log(err);\n        reject(\"Unable to sync the database.\");\n      });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}