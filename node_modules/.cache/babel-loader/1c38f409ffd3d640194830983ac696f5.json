{"ast":null,"code":"// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// when used in node, this will actually load the util module we depend on\n// versus loading the builtin util module as happens otherwise\n// this is a bug in node module loading as far as I am concerned\nvar util = require('util/');\n\nvar pSlice = Array.prototype.slice;\nvar hasOwn = Object.prototype.hasOwnProperty; // 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok; // 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n\n  var stackStartFunction = options.stackStartFunction || fail;\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n\n    if (err.stack) {\n      var out = err.stack; // try to strip useless frames\n\n      var fn_name = stackStartFunction.name;\n      var idx = out.indexOf('\\n' + fn_name);\n\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n}; // assert.AssertionError instanceof Error\n\n\nutil.inherits(assert.AssertionError, Error);\n\nfunction replacer(key, value) {\n  if (util.isUndefined(value)) {\n    return '' + value;\n  }\n\n  if (util.isNumber(value) && !isFinite(value)) {\n    return value.toString();\n  }\n\n  if (util.isFunction(value) || util.isRegExp(value)) {\n    return value.toString();\n  }\n\n  return value;\n}\n\nfunction truncate(s, n) {\n  if (util.isString(s)) {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\n\nfunction getMessage(self) {\n  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' + self.operator + ' ' + truncate(JSON.stringify(self.expected, replacer), 128);\n} // At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n} // EXTENSION! allows for well behaved errors defined elsewhere.\n\n\nassert.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\n\nassert.ok = ok; // 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n}; // 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n}; // 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {\n    if (actual.length != expected.length) return false;\n\n    for (var i = 0; i < actual.length; i++) {\n      if (actual[i] !== expected[i]) return false;\n    }\n\n    return true; // 7.2. If the expected value is a Date object, the actual value is\n    // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is\n    // equivalent if it is also a RegExp object with the same source and\n    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',\n    // equivalence is determined by ==.\n  } else if (!util.isObject(actual) && !util.isObject(expected)) {\n    return actual == expected; // 7.5 For all other Object pairs, including Array objects, equivalence is\n    // determined by having the same number of owned properties (as verified\n    // with Object.prototype.hasOwnProperty.call), the same set of keys\n    // (although not necessarily the same order), equivalent values for every\n    // corresponding key, and an identical 'prototype' property. Note: this\n    // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b) {\n  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b)) return false; // an identical 'prototype' property.\n\n  if (a.prototype !== b.prototype) return false; // if one is a primitive, the other must be same\n\n  if (util.isPrimitive(a) || util.isPrimitive(b)) {\n    return a === b;\n  }\n\n  var aIsArgs = isArguments(a),\n      bIsArgs = isArguments(b);\n  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;\n\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b);\n  }\n\n  var ka = objectKeys(a),\n      kb = objectKeys(b),\n      key,\n      i; // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n\n  if (ka.length != kb.length) return false; //the same set of keys (although not necessarily the same order),\n\n  ka.sort();\n  kb.sort(); //~~~cheap key test\n\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i]) return false;\n  } //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n\n\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key])) return false;\n  }\n\n  return true;\n} // 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n}; // 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n}; // 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  } else if (actual instanceof expected) {\n    return true;\n  } else if (expected.call({}, actual) === true) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (util.isString(expected)) {\n    message = expected;\n    expected = null;\n  }\n\n  try {\n    block();\n  } catch (e) {\n    actual = e;\n  }\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  if (!shouldThrow && expectedException(actual, expected)) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {\n    throw actual;\n  }\n} // 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\n\nassert.throws = function (block,\n/*optional*/\nerror,\n/*optional*/\nmessage) {\n  _throws.apply(this, [true].concat(pSlice.call(arguments)));\n}; // EXTENSION! This is annoying to write outside this module.\n\n\nassert.doesNotThrow = function (block,\n/*optional*/\nmessage) {\n  _throws.apply(this, [false].concat(pSlice.call(arguments)));\n};\n\nassert.ifError = function (err) {\n  if (err) {\n    throw err;\n  }\n};\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n\n  return keys;\n};","map":{"version":3,"sources":["/Users/albab/bookapro/amazon/node_modules/assert/assert.js"],"names":["util","require","pSlice","Array","prototype","slice","hasOwn","Object","hasOwnProperty","assert","module","exports","ok","AssertionError","options","name","actual","expected","operator","message","generatedMessage","getMessage","stackStartFunction","fail","Error","captureStackTrace","err","stack","out","fn_name","idx","indexOf","next_line","substring","inherits","replacer","key","value","isUndefined","isNumber","isFinite","toString","isFunction","isRegExp","truncate","s","n","isString","length","self","JSON","stringify","equal","notEqual","deepEqual","_deepEqual","isBuffer","i","isDate","getTime","source","global","multiline","lastIndex","ignoreCase","isObject","objEquiv","isArguments","object","call","a","b","isNullOrUndefined","isPrimitive","aIsArgs","bIsArgs","ka","objectKeys","kb","sort","notDeepEqual","strictEqual","notStrictEqual","expectedException","test","_throws","shouldThrow","block","e","throws","error","apply","concat","arguments","doesNotThrow","ifError","keys","obj","push"],"mappings":"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","sourcesContent":["// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// when used in node, this will actually load the util module we depend on\n// versus loading the builtin util module as happens otherwise\n// this is a bug in node module loading as far as I am concerned\nvar util = require('util/');\n\nvar pSlice = Array.prototype.slice;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  }\n  else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = stackStartFunction.name;\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction replacer(key, value) {\n  if (util.isUndefined(value)) {\n    return '' + value;\n  }\n  if (util.isNumber(value) && !isFinite(value)) {\n    return value.toString();\n  }\n  if (util.isFunction(value) || util.isRegExp(value)) {\n    return value.toString();\n  }\n  return value;\n}\n\nfunction truncate(s, n) {\n  if (util.isString(s)) {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\n\nfunction getMessage(self) {\n  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(JSON.stringify(self.expected, replacer), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {\n    if (actual.length != expected.length) return false;\n\n    for (var i = 0; i < actual.length; i++) {\n      if (actual[i] !== expected[i]) return false;\n    }\n\n    return true;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!util.isObject(actual) && !util.isObject(expected)) {\n    return actual == expected;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b) {\n  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b)) {\n    return a === b;\n  }\n  var aIsArgs = isArguments(a),\n      bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b);\n  }\n  var ka = objectKeys(a),\n      kb = objectKeys(b),\n      key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key])) return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  } else if (actual instanceof expected) {\n    return true;\n  } else if (expected.call({}, actual) === true) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (util.isString(expected)) {\n    message = expected;\n    expected = null;\n  }\n\n  try {\n    block();\n  } catch (e) {\n    actual = e;\n  }\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  if (!shouldThrow && expectedException(actual, expected)) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws.apply(this, [true].concat(pSlice.call(arguments)));\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/message) {\n  _throws.apply(this, [false].concat(pSlice.call(arguments)));\n};\n\nassert.ifError = function(err) { if (err) {throw err;}};\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n"]},"metadata":{},"sourceType":"script"}