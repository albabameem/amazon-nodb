{"ast":null,"code":"import Parchment from 'parchment';\nimport Quill from '../core/quill';\nimport Module from '../core/module';\n\nclass History extends Module {\n  constructor(quill, options) {\n    super(quill, options);\n    this.lastRecorded = 0;\n    this.ignoreChange = false;\n    this.clear();\n    this.quill.on(Quill.events.EDITOR_CHANGE, (eventName, delta, oldDelta, source) => {\n      if (eventName !== Quill.events.TEXT_CHANGE || this.ignoreChange) return;\n\n      if (!this.options.userOnly || source === Quill.sources.USER) {\n        this.record(delta, oldDelta);\n      } else {\n        this.transform(delta);\n      }\n    });\n    this.quill.keyboard.addBinding({\n      key: 'Z',\n      shortKey: true\n    }, this.undo.bind(this));\n    this.quill.keyboard.addBinding({\n      key: 'Z',\n      shortKey: true,\n      shiftKey: true\n    }, this.redo.bind(this));\n\n    if (/Win/i.test(navigator.platform)) {\n      this.quill.keyboard.addBinding({\n        key: 'Y',\n        shortKey: true\n      }, this.redo.bind(this));\n    }\n  }\n\n  change(source, dest) {\n    if (this.stack[source].length === 0) return;\n    let delta = this.stack[source].pop();\n    this.stack[dest].push(delta);\n    this.lastRecorded = 0;\n    this.ignoreChange = true;\n    this.quill.updateContents(delta[source], Quill.sources.USER);\n    this.ignoreChange = false;\n    let index = getLastChangeIndex(delta[source]);\n    this.quill.setSelection(index);\n  }\n\n  clear() {\n    this.stack = {\n      undo: [],\n      redo: []\n    };\n  }\n\n  cutoff() {\n    this.lastRecorded = 0;\n  }\n\n  record(changeDelta, oldDelta) {\n    if (changeDelta.ops.length === 0) return;\n    this.stack.redo = [];\n    let undoDelta = this.quill.getContents().diff(oldDelta);\n    let timestamp = Date.now();\n\n    if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {\n      let delta = this.stack.undo.pop();\n      undoDelta = undoDelta.compose(delta.undo);\n      changeDelta = delta.redo.compose(changeDelta);\n    } else {\n      this.lastRecorded = timestamp;\n    }\n\n    this.stack.undo.push({\n      redo: changeDelta,\n      undo: undoDelta\n    });\n\n    if (this.stack.undo.length > this.options.maxStack) {\n      this.stack.undo.shift();\n    }\n  }\n\n  redo() {\n    this.change('redo', 'undo');\n  }\n\n  transform(delta) {\n    this.stack.undo.forEach(function (change) {\n      change.undo = delta.transform(change.undo, true);\n      change.redo = delta.transform(change.redo, true);\n    });\n    this.stack.redo.forEach(function (change) {\n      change.undo = delta.transform(change.undo, true);\n      change.redo = delta.transform(change.redo, true);\n    });\n  }\n\n  undo() {\n    this.change('undo', 'redo');\n  }\n\n}\n\nHistory.DEFAULTS = {\n  delay: 1000,\n  maxStack: 100,\n  userOnly: false\n};\n\nfunction endsWithNewlineChange(delta) {\n  let lastOp = delta.ops[delta.ops.length - 1];\n  if (lastOp == null) return false;\n\n  if (lastOp.insert != null) {\n    return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\\n');\n  }\n\n  if (lastOp.attributes != null) {\n    return Object.keys(lastOp.attributes).some(function (attr) {\n      return Parchment.query(attr, Parchment.Scope.BLOCK) != null;\n    });\n  }\n\n  return false;\n}\n\nfunction getLastChangeIndex(delta) {\n  let deleteLength = delta.reduce(function (length, op) {\n    length += op.delete || 0;\n    return length;\n  }, 0);\n  let changeIndex = delta.length() - deleteLength;\n\n  if (endsWithNewlineChange(delta)) {\n    changeIndex -= 1;\n  }\n\n  return changeIndex;\n}\n\nexport { History as default, getLastChangeIndex };","map":{"version":3,"sources":["/Users/albab/bookapro/amazon/src/assets/vendor/quill/modules/history.js"],"names":["Parchment","Quill","Module","History","constructor","quill","options","lastRecorded","ignoreChange","clear","on","events","EDITOR_CHANGE","eventName","delta","oldDelta","source","TEXT_CHANGE","userOnly","sources","USER","record","transform","keyboard","addBinding","key","shortKey","undo","bind","shiftKey","redo","test","navigator","platform","change","dest","stack","length","pop","push","updateContents","index","getLastChangeIndex","setSelection","cutoff","changeDelta","ops","undoDelta","getContents","diff","timestamp","Date","now","delay","compose","maxStack","shift","forEach","DEFAULTS","endsWithNewlineChange","lastOp","insert","endsWith","attributes","Object","keys","some","attr","query","Scope","BLOCK","deleteLength","reduce","op","delete","changeIndex","default"],"mappings":"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","sourcesContent":["import Parchment from 'parchment';\nimport Quill from '../core/quill';\nimport Module from '../core/module';\n\n\nclass History extends Module {\n  constructor(quill, options) {\n    super(quill, options);\n    this.lastRecorded = 0;\n    this.ignoreChange = false;\n    this.clear();\n    this.quill.on(Quill.events.EDITOR_CHANGE, (eventName, delta, oldDelta, source) => {\n      if (eventName !== Quill.events.TEXT_CHANGE || this.ignoreChange) return;\n      if (!this.options.userOnly || source === Quill.sources.USER) {\n        this.record(delta, oldDelta);\n      } else {\n        this.transform(delta);\n      }\n    });\n    this.quill.keyboard.addBinding({ key: 'Z', shortKey: true }, this.undo.bind(this));\n    this.quill.keyboard.addBinding({ key: 'Z', shortKey: true, shiftKey: true }, this.redo.bind(this));\n    if (/Win/i.test(navigator.platform)) {\n      this.quill.keyboard.addBinding({ key: 'Y', shortKey: true }, this.redo.bind(this));\n    }\n  }\n\n  change(source, dest) {\n    if (this.stack[source].length === 0) return;\n    let delta = this.stack[source].pop();\n    this.stack[dest].push(delta);\n    this.lastRecorded = 0;\n    this.ignoreChange = true;\n    this.quill.updateContents(delta[source], Quill.sources.USER);\n    this.ignoreChange = false;\n    let index = getLastChangeIndex(delta[source]);\n    this.quill.setSelection(index);\n  }\n\n  clear() {\n    this.stack = { undo: [], redo: [] };\n  }\n\n  cutoff() {\n    this.lastRecorded = 0;\n  }\n\n  record(changeDelta, oldDelta) {\n    if (changeDelta.ops.length === 0) return;\n    this.stack.redo = [];\n    let undoDelta = this.quill.getContents().diff(oldDelta);\n    let timestamp = Date.now();\n    if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {\n      let delta = this.stack.undo.pop();\n      undoDelta = undoDelta.compose(delta.undo);\n      changeDelta = delta.redo.compose(changeDelta);\n    } else {\n      this.lastRecorded = timestamp;\n    }\n    this.stack.undo.push({\n      redo: changeDelta,\n      undo: undoDelta\n    });\n    if (this.stack.undo.length > this.options.maxStack) {\n      this.stack.undo.shift();\n    }\n  }\n\n  redo() {\n    this.change('redo', 'undo');\n  }\n\n  transform(delta) {\n    this.stack.undo.forEach(function(change) {\n      change.undo = delta.transform(change.undo, true);\n      change.redo = delta.transform(change.redo, true);\n    });\n    this.stack.redo.forEach(function(change) {\n      change.undo = delta.transform(change.undo, true);\n      change.redo = delta.transform(change.redo, true);\n    });\n  }\n\n  undo() {\n    this.change('undo', 'redo');\n  }\n}\nHistory.DEFAULTS = {\n  delay: 1000,\n  maxStack: 100,\n  userOnly: false\n};\n\nfunction endsWithNewlineChange(delta) {\n  let lastOp = delta.ops[delta.ops.length - 1];\n  if (lastOp == null) return false;\n  if (lastOp.insert != null) {\n    return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\\n');\n  }\n  if (lastOp.attributes != null) {\n    return Object.keys(lastOp.attributes).some(function(attr) {\n      return Parchment.query(attr, Parchment.Scope.BLOCK) != null;\n    });\n  }\n  return false;\n}\n\nfunction getLastChangeIndex(delta) {\n  let deleteLength = delta.reduce(function(length, op) {\n    length += (op.delete || 0);\n    return length;\n  }, 0);\n  let changeIndex = delta.length() - deleteLength;\n  if (endsWithNewlineChange(delta)) {\n    changeIndex -= 1;\n  }\n  return changeIndex;\n}\n\n\nexport { History as default, getLastChangeIndex };\n"]},"metadata":{},"sourceType":"module"}