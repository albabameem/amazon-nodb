{"ast":null,"code":"import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults,\n      ...options\n    }; // attribute to type into\n\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents; // show cursor\n\n    self.showCursor = self.isInput ? false : self.options.showCursor; // custom cursor\n\n    self.cursorChar = self.options.cursorChar; // Is the cursor blinking\n\n    self.cursorBlinking = true; // text content of element\n\n    self.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent; // html or plain text\n\n    self.contentType = self.options.contentType; // typing speed\n\n    self.typeSpeed = self.options.typeSpeed; // add a delay before typing starts\n\n    self.startDelay = self.options.startDelay; // backspacing speed\n\n    self.backSpeed = self.options.backSpeed; // only backspace what doesn't match the previous string\n\n    self.smartBackspace = self.options.smartBackspace; // amount of time to wait before backspacing\n\n    self.backDelay = self.options.backDelay; // Fade out instead of backspace\n\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay; // variable to check whether typing is currently paused\n\n    self.isPaused = false; // input strings of text\n\n    self.strings = self.options.strings.map(s => s.trim()); // div containing strings\n\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.display = 'none';\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    } // character number position of current string\n\n\n    self.strPos = 0; // current array position\n\n    self.arrayPos = 0; // index of string to stop backspacing on\n\n    self.stopNum = 0; // Looping logic\n\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0; // shuffle the strings\n\n    self.shuffle = self.options.shuffle; // the order of strings\n\n    self.sequence = [];\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0\n    }; // When the typing is complete (when not looped)\n\n    self.typingComplete = false; // Set the order in which the strings are typed\n\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    } // If there is some text in the element\n\n\n    self.currentElContent = this.getCurrentElContent(self);\n    self.autoInsertCss = self.options.autoInsertCss;\n    this.appendAnimationCss(self);\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n\n    return elContent;\n  }\n\n  appendAnimationCss(self) {\n    const cssDataName = 'data-typed-js-css';\n\n    if (!self.autoInsertCss) {\n      return;\n    }\n\n    if (!self.showCursor && !self.fadeOut) {\n      return;\n    }\n\n    if (document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.type = 'text/css';\n    css.setAttribute(cssDataName, true);\n    let innerCss = '';\n\n    if (self.showCursor) {\n      innerCss += `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n    }\n\n    if (self.fadeOut) {\n      innerCss += `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n    }\n\n    if (css.length === 0) {\n      return;\n    }\n\n    css.innerHTML = innerCss;\n    document.body.appendChild(css);\n  }\n\n}\nexport let initializer = new Initializer();","map":{"version":3,"sources":["/Users/albab/bookapro/amazon/src/assets/vendor/typed.js/src/initializer.js"],"names":["defaults","Initializer","load","self","options","elementId","el","document","querySelector","isInput","tagName","toLowerCase","attr","bindInputFocusEvents","showCursor","cursorChar","cursorBlinking","elContent","getAttribute","textContent","contentType","typeSpeed","startDelay","backSpeed","smartBackspace","backDelay","fadeOut","fadeOutClass","fadeOutDelay","isPaused","strings","map","s","trim","stringsElement","style","display","Array","prototype","slice","apply","children","stringsLength","length","i","stringEl","push","innerHTML","strPos","arrayPos","stopNum","loop","loopCount","curLoop","shuffle","sequence","pause","status","typewrite","curString","curStrPos","typingComplete","currentElContent","getCurrentElContent","autoInsertCss","appendAnimationCss","value","cssDataName","css","createElement","type","setAttribute","innerCss","body","appendChild","initializer"],"mappings":"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","sourcesContent":["import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults, ...options };\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr\n      ? self.el.getAttribute(self.attr)\n      : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.display = 'none';\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n    // the order of strings\n    self.sequence = [];\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0\n    };\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    this.appendAnimationCss(self);\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendAnimationCss(self) {\n    const cssDataName = 'data-typed-js-css';\n    if (!self.autoInsertCss) {\n      return;\n    }\n    if (!self.showCursor && !self.fadeOut) {\n      return;\n    }\n    if (document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.type = 'text/css';\n    css.setAttribute(cssDataName, true);\n\n    let innerCss = '';\n    if (self.showCursor) {\n      innerCss += `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n    }\n    if (self.fadeOut) {\n      innerCss += `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n    }\n    if (css.length === 0) {\n      return;\n    }\n    css.innerHTML = innerCss;\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n"]},"metadata":{},"sourceType":"module"}