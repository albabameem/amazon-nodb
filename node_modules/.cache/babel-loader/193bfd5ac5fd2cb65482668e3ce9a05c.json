{"ast":null,"code":"require('babel/register');\n\nconst gulp = require('gulp');\n\nconst webpack = require('webpack-stream');\n\nconst sourcemaps = require('gulp-sourcemaps');\n\nconst rename = require('gulp-rename');\n\nconst uglify = require('gulp-uglify');\n\nconst livereload = require('gulp-livereload');\n\nconst gulpDocumentation = require('gulp-documentation');\n\nconst eslint = require('gulp-eslint');\n\nconst server = require('gulp-express');\n\ngulp.task('lint', () => {\n  return gulp.src('src/*.js') // default: use local linting config\n  .pipe(eslint()) // format ESLint results and print them to the console\n  .pipe(eslint.format()).pipe(eslint.failAfterError());\n});\ngulp.task('build', () => {\n  return gulp.src('src/*.js').pipe(webpack(require('./webpack.config.js'))).pipe(gulp.dest('./lib')).pipe(sourcemaps.init({\n    loadMaps: true\n  })).pipe(uglify({\n    preserveComments: 'license',\n    compress: {\n      /*eslint-disable */\n      negate_iife: false\n      /*eslint-enable */\n\n    }\n  })).pipe(rename('typed.min.js')).pipe(sourcemaps.write('./')).pipe(gulp.dest('lib/')).pipe(livereload());\n});\ngulp.task('md-docs', () => {\n  return gulp.src('./src/*.js').pipe(gulpDocumentation('md')).pipe(gulp.dest('docs'));\n});\ngulp.task('html-docs', () => {\n  return gulp.src('./src/*.js').pipe(gulpDocumentation('html'), {}, {\n    name: 'Typed.js Docs',\n    version: '2.0.11'\n  }).pipe(gulp.dest('docs'));\n});\ngulp.task('server', function () {\n  // Start the server at the beginning of the task\n  server.run(['app.js']); // Restart the server when file changes\n\n  gulp.watch(['docs/**/*.html'], server.notify);\n  gulp.watch(['docs/styles/**/*.scss'], ['styles:scss']); //gulp.watch(['{.tmp,app}/styles/**/*.css'], ['styles:css', server.notify]);\n  //Event object won't pass down to gulp.watch's callback if there's more than one of them.\n  //So the correct way to use server.notify is as following:\n\n  gulp.watch(['{.tmp,docs}/styles/**/*.css'], function (event) {\n    gulp.run('styles:css');\n    server.notify(event); //pipe support is added for server.notify since v0.1.5,\n    //see https://github.com/gimm/gulp-express#servernotifyevent\n  });\n  gulp.watch(['docs/scripts/**/*.js'], ['jshint']);\n  gulp.watch(['docs/images/**/*'], server.notify);\n});\ngulp.task('serve', ['watch', 'server']); // Watch Task\n\ngulp.task('watch', () => {\n  livereload({\n    start: true\n  });\n  gulp.watch('src/*.js', ['md-docs', 'html-docs', 'default']);\n});\ngulp.task('default', ['lint', 'build']);","map":{"version":3,"sources":["/Users/albab/bookapro/amazon/src/assets/vendor/typed.js/gulpfile.js"],"names":["require","gulp","webpack","sourcemaps","rename","uglify","livereload","gulpDocumentation","eslint","server","task","src","pipe","format","failAfterError","dest","init","loadMaps","preserveComments","compress","negate_iife","write","name","version","run","watch","notify","event","start"],"mappings":"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","sourcesContent":["require('babel/register');\nconst gulp = require('gulp');\nconst webpack = require('webpack-stream');\nconst sourcemaps = require('gulp-sourcemaps');\nconst rename = require('gulp-rename');\nconst uglify = require('gulp-uglify');\nconst livereload = require('gulp-livereload');\nconst gulpDocumentation = require('gulp-documentation');\nconst eslint = require('gulp-eslint');\nconst server = require('gulp-express');\n\ngulp.task('lint', () => {\n  return (\n    gulp\n      .src('src/*.js')\n      // default: use local linting config\n      .pipe(eslint())\n      // format ESLint results and print them to the console\n      .pipe(eslint.format())\n      .pipe(eslint.failAfterError())\n  );\n});\n\ngulp.task('build', () => {\n  return gulp\n    .src('src/*.js')\n    .pipe(webpack(require('./webpack.config.js')))\n    .pipe(gulp.dest('./lib'))\n    .pipe(sourcemaps.init({ loadMaps: true }))\n    .pipe(\n      uglify({\n        preserveComments: 'license',\n        compress: {\n          /*eslint-disable */\n          negate_iife: false\n          /*eslint-enable */\n        }\n      })\n    )\n    .pipe(rename('typed.min.js'))\n    .pipe(sourcemaps.write('./'))\n    .pipe(gulp.dest('lib/'))\n    .pipe(livereload());\n});\n\ngulp.task('md-docs', () => {\n  return gulp\n    .src('./src/*.js')\n    .pipe(gulpDocumentation('md'))\n    .pipe(gulp.dest('docs'));\n});\n\ngulp.task('html-docs', () => {\n  return gulp\n    .src('./src/*.js')\n    .pipe(\n      gulpDocumentation('html'),\n      {},\n      {\n        name: 'Typed.js Docs',\n        version: '2.0.11'\n      }\n    )\n    .pipe(gulp.dest('docs'));\n});\n\ngulp.task('server', function() {\n  // Start the server at the beginning of the task\n  server.run(['app.js']);\n  // Restart the server when file changes\n  gulp.watch(['docs/**/*.html'], server.notify);\n  gulp.watch(['docs/styles/**/*.scss'], ['styles:scss']);\n  //gulp.watch(['{.tmp,app}/styles/**/*.css'], ['styles:css', server.notify]);\n  //Event object won't pass down to gulp.watch's callback if there's more than one of them.\n  //So the correct way to use server.notify is as following:\n  gulp.watch(['{.tmp,docs}/styles/**/*.css'], function(event) {\n    gulp.run('styles:css');\n    server.notify(event);\n    //pipe support is added for server.notify since v0.1.5,\n    //see https://github.com/gimm/gulp-express#servernotifyevent\n  });\n\n  gulp.watch(['docs/scripts/**/*.js'], ['jshint']);\n  gulp.watch(['docs/images/**/*'], server.notify);\n});\n\ngulp.task('serve', ['watch', 'server']);\n\n// Watch Task\ngulp.task('watch', () => {\n  livereload({ start: true });\n  gulp.watch('src/*.js', ['md-docs', 'html-docs', 'default']);\n});\n\ngulp.task('default', ['lint', 'build']);\n"]},"metadata":{},"sourceType":"module"}