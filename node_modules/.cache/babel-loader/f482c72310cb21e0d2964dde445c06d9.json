{"ast":null,"code":"import Parchment from 'parchment';\nimport { sanitize } from '../formats/link';\nconst ATTRIBUTES = ['alt', 'height', 'width'];\n\nclass Image extends Parchment.Embed {\n  static create(value) {\n    let node = super.create(value);\n\n    if (typeof value === 'string') {\n      node.setAttribute('src', this.sanitize(value));\n    }\n\n    return node;\n  }\n\n  static formats(domNode) {\n    return ATTRIBUTES.reduce(function (formats, attribute) {\n      if (domNode.hasAttribute(attribute)) {\n        formats[attribute] = domNode.getAttribute(attribute);\n      }\n\n      return formats;\n    }, {});\n  }\n\n  static match(url) {\n    return /\\.(jpe?g|gif|png)$/.test(url) || /^data:image\\/.+;base64/.test(url);\n  }\n\n  static sanitize(url) {\n    return sanitize(url, ['http', 'https', 'data']) ? url : '//:0';\n  }\n\n  static value(domNode) {\n    return domNode.getAttribute('src');\n  }\n\n  format(name, value) {\n    if (ATTRIBUTES.indexOf(name) > -1) {\n      if (value) {\n        this.domNode.setAttribute(name, value);\n      } else {\n        this.domNode.removeAttribute(name);\n      }\n    } else {\n      super.format(name, value);\n    }\n  }\n\n}\n\nImage.blotName = 'image';\nImage.tagName = 'IMG';\nexport default Image;","map":{"version":3,"sources":["/Users/albab/bookapro/amazon/src/assets/vendor/quill/formats/image.js"],"names":["Parchment","sanitize","ATTRIBUTES","Image","Embed","create","value","node","setAttribute","formats","domNode","reduce","attribute","hasAttribute","getAttribute","match","url","test","format","name","indexOf","removeAttribute","blotName","tagName"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,MAAMC,UAAU,GAAG,CACjB,KADiB,EAEjB,QAFiB,EAGjB,OAHiB,CAAnB;;AAOA,MAAMC,KAAN,SAAoBH,SAAS,CAACI,KAA9B,CAAoC;AACrB,SAANC,MAAM,CAACC,KAAD,EAAQ;AACnB,QAAIC,IAAI,GAAG,MAAMF,MAAN,CAAaC,KAAb,CAAX;;AACA,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BC,MAAAA,IAAI,CAACC,YAAL,CAAkB,KAAlB,EAAyB,KAAKP,QAAL,CAAcK,KAAd,CAAzB;AACD;;AACD,WAAOC,IAAP;AACD;;AAEa,SAAPE,OAAO,CAACC,OAAD,EAAU;AACtB,WAAOR,UAAU,CAACS,MAAX,CAAkB,UAASF,OAAT,EAAkBG,SAAlB,EAA6B;AACpD,UAAIF,OAAO,CAACG,YAAR,CAAqBD,SAArB,CAAJ,EAAqC;AACnCH,QAAAA,OAAO,CAACG,SAAD,CAAP,GAAqBF,OAAO,CAACI,YAAR,CAAqBF,SAArB,CAArB;AACD;;AACD,aAAOH,OAAP;AACD,KALM,EAKJ,EALI,CAAP;AAMD;;AAEW,SAALM,KAAK,CAACC,GAAD,EAAM;AAChB,WAAO,qBAAqBC,IAArB,CAA0BD,GAA1B,KAAkC,yBAAyBC,IAAzB,CAA8BD,GAA9B,CAAzC;AACD;;AAEc,SAARf,QAAQ,CAACe,GAAD,EAAM;AACnB,WAAOf,QAAQ,CAACe,GAAD,EAAM,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,CAAN,CAAR,GAA2CA,GAA3C,GAAiD,MAAxD;AACD;;AAEW,SAALV,KAAK,CAACI,OAAD,EAAU;AACpB,WAAOA,OAAO,CAACI,YAAR,CAAqB,KAArB,CAAP;AACD;;AAEDI,EAAAA,MAAM,CAACC,IAAD,EAAOb,KAAP,EAAc;AAClB,QAAIJ,UAAU,CAACkB,OAAX,CAAmBD,IAAnB,IAA2B,CAAC,CAAhC,EAAmC;AACjC,UAAIb,KAAJ,EAAW;AACT,aAAKI,OAAL,CAAaF,YAAb,CAA0BW,IAA1B,EAAgCb,KAAhC;AACD,OAFD,MAEO;AACL,aAAKI,OAAL,CAAaW,eAAb,CAA6BF,IAA7B;AACD;AACF,KAND,MAMO;AACL,YAAMD,MAAN,CAAaC,IAAb,EAAmBb,KAAnB;AACD;AACF;;AAxCiC;;AA0CpCH,KAAK,CAACmB,QAAN,GAAiB,OAAjB;AACAnB,KAAK,CAACoB,OAAN,GAAgB,KAAhB;AAGA,eAAepB,KAAf","sourcesContent":["import Parchment from 'parchment';\nimport { sanitize } from '../formats/link';\n\nconst ATTRIBUTES = [\n  'alt',\n  'height',\n  'width'\n];\n\n\nclass Image extends Parchment.Embed {\n  static create(value) {\n    let node = super.create(value);\n    if (typeof value === 'string') {\n      node.setAttribute('src', this.sanitize(value));\n    }\n    return node;\n  }\n\n  static formats(domNode) {\n    return ATTRIBUTES.reduce(function(formats, attribute) {\n      if (domNode.hasAttribute(attribute)) {\n        formats[attribute] = domNode.getAttribute(attribute);\n      }\n      return formats;\n    }, {});\n  }\n\n  static match(url) {\n    return /\\.(jpe?g|gif|png)$/.test(url) || /^data:image\\/.+;base64/.test(url);\n  }\n\n  static sanitize(url) {\n    return sanitize(url, ['http', 'https', 'data']) ? url : '//:0';\n  }\n\n  static value(domNode) {\n    return domNode.getAttribute('src');\n  }\n\n  format(name, value) {\n    if (ATTRIBUTES.indexOf(name) > -1) {\n      if (value) {\n        this.domNode.setAttribute(name, value);\n      } else {\n        this.domNode.removeAttribute(name);\n      }\n    } else {\n      super.format(name, value);\n    }\n  }\n}\nImage.blotName = 'image';\nImage.tagName = 'IMG';\n\n\nexport default Image;\n"]},"metadata":{},"sourceType":"module"}